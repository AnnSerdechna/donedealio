schema {
  query: Query
  mutation: Mutation
}

type Account {
  access_token: String
  createdAt: DateTimeISO!
  expires_at: Int
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  updatedAt: DateTimeISO!
  user: User!
  userId: String!
}

type AccountAvgAggregate {
  expires_at: Float
}

input AccountAvgOrderByAggregateInput {
  expires_at: SortOrder
}

type AccountCountAggregate {
  _all: Int!
  access_token: Int!
  createdAt: Int!
  expires_at: Int!
  id_token: Int!
  provider: Int!
  providerAccountId: Int!
  refresh_token: Int!
  scope: Int!
  session_state: Int!
  token_type: Int!
  type: Int!
  updatedAt: Int!
  userId: Int!
}

input AccountCountOrderByAggregateInput {
  access_token: SortOrder
  createdAt: SortOrder
  expires_at: SortOrder
  id_token: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrder
  scope: SortOrder
  session_state: SortOrder
  token_type: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input AccountCreateInput {
  access_token: String
  createdAt: DateTimeISO
  expires_at: Int
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutAccountsInput!
}

input AccountCreateManyInput {
  access_token: String
  createdAt: DateTimeISO
  expires_at: Int
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  updatedAt: DateTimeISO
  userId: String!
}

input AccountCreateManyUserInput {
  access_token: String
  createdAt: DateTimeISO
  expires_at: Int
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  updatedAt: DateTimeISO
}

input AccountCreateManyUserInputEnvelope {
  data: [AccountCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input AccountCreateNestedManyWithoutUserInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
  create: [AccountCreateWithoutUserInput!]
  createMany: AccountCreateManyUserInputEnvelope
}

input AccountCreateOrConnectWithoutUserInput {
  create: AccountCreateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateWithoutUserInput {
  access_token: String
  createdAt: DateTimeISO
  expires_at: Int
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  updatedAt: DateTimeISO
}

type AccountGroupBy {
  _avg: AccountAvgAggregate
  _count: AccountCountAggregate
  _max: AccountMaxAggregate
  _min: AccountMinAggregate
  _sum: AccountSumAggregate
  access_token: String
  createdAt: DateTimeISO!
  expires_at: Int
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  updatedAt: DateTimeISO!
  userId: String!
}

input AccountListRelationFilter {
  every: AccountWhereInput
  none: AccountWhereInput
  some: AccountWhereInput
}

type AccountMaxAggregate {
  access_token: String
  createdAt: DateTimeISO
  expires_at: Int
  id_token: String
  provider: String
  providerAccountId: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String
  updatedAt: DateTimeISO
  userId: String
}

input AccountMaxOrderByAggregateInput {
  access_token: SortOrder
  createdAt: SortOrder
  expires_at: SortOrder
  id_token: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrder
  scope: SortOrder
  session_state: SortOrder
  token_type: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type AccountMinAggregate {
  access_token: String
  createdAt: DateTimeISO
  expires_at: Int
  id_token: String
  provider: String
  providerAccountId: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String
  updatedAt: DateTimeISO
  userId: String
}

input AccountMinOrderByAggregateInput {
  access_token: SortOrder
  createdAt: SortOrder
  expires_at: SortOrder
  id_token: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrder
  scope: SortOrder
  session_state: SortOrder
  token_type: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input AccountOrderByRelationAggregateInput {
  _count: SortOrder
}

input AccountOrderByWithAggregationInput {
  _avg: AccountAvgOrderByAggregateInput
  _count: AccountCountOrderByAggregateInput
  _max: AccountMaxOrderByAggregateInput
  _min: AccountMinOrderByAggregateInput
  _sum: AccountSumOrderByAggregateInput
  access_token: SortOrderInput
  createdAt: SortOrder
  expires_at: SortOrderInput
  id_token: SortOrderInput
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrderInput
  scope: SortOrderInput
  session_state: SortOrderInput
  token_type: SortOrderInput
  type: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input AccountOrderByWithRelationInput {
  access_token: SortOrderInput
  createdAt: SortOrder
  expires_at: SortOrderInput
  id_token: SortOrderInput
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrderInput
  scope: SortOrderInput
  session_state: SortOrderInput
  token_type: SortOrderInput
  type: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input AccountProviderProviderAccountIdCompoundUniqueInput {
  provider: String!
  providerAccountId: String!
}

enum AccountScalarFieldEnum {
  access_token
  createdAt
  expires_at
  id_token
  provider
  providerAccountId
  refresh_token
  scope
  session_state
  token_type
  type
  updatedAt
  userId
}

input AccountScalarWhereInput {
  AND: [AccountScalarWhereInput!]
  NOT: [AccountScalarWhereInput!]
  OR: [AccountScalarWhereInput!]
  access_token: StringNullableFilter
  createdAt: DateTimeFilter
  expires_at: IntNullableFilter
  id_token: StringNullableFilter
  provider: StringFilter
  providerAccountId: StringFilter
  refresh_token: StringNullableFilter
  scope: StringNullableFilter
  session_state: StringNullableFilter
  token_type: StringNullableFilter
  type: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input AccountScalarWhereWithAggregatesInput {
  AND: [AccountScalarWhereWithAggregatesInput!]
  NOT: [AccountScalarWhereWithAggregatesInput!]
  OR: [AccountScalarWhereWithAggregatesInput!]
  access_token: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  expires_at: IntNullableWithAggregatesFilter
  id_token: StringNullableWithAggregatesFilter
  provider: StringWithAggregatesFilter
  providerAccountId: StringWithAggregatesFilter
  refresh_token: StringNullableWithAggregatesFilter
  scope: StringNullableWithAggregatesFilter
  session_state: StringNullableWithAggregatesFilter
  token_type: StringNullableWithAggregatesFilter
  type: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type AccountSumAggregate {
  expires_at: Int
}

input AccountSumOrderByAggregateInput {
  expires_at: SortOrder
}

input AccountUpdateInput {
  access_token: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expires_at: NullableIntFieldUpdateOperationsInput
  id_token: NullableStringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  refresh_token: NullableStringFieldUpdateOperationsInput
  scope: NullableStringFieldUpdateOperationsInput
  session_state: NullableStringFieldUpdateOperationsInput
  token_type: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAccountsNestedInput
}

input AccountUpdateManyMutationInput {
  access_token: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expires_at: NullableIntFieldUpdateOperationsInput
  id_token: NullableStringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  refresh_token: NullableStringFieldUpdateOperationsInput
  scope: NullableStringFieldUpdateOperationsInput
  session_state: NullableStringFieldUpdateOperationsInput
  token_type: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AccountUpdateManyWithWhereWithoutUserInput {
  data: AccountUpdateManyMutationInput!
  where: AccountScalarWhereInput!
}

input AccountUpdateManyWithoutUserNestedInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
  create: [AccountCreateWithoutUserInput!]
  createMany: AccountCreateManyUserInputEnvelope
  delete: [AccountWhereUniqueInput!]
  deleteMany: [AccountScalarWhereInput!]
  disconnect: [AccountWhereUniqueInput!]
  set: [AccountWhereUniqueInput!]
  update: [AccountUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AccountUpdateManyWithWhereWithoutUserInput!]
  upsert: [AccountUpsertWithWhereUniqueWithoutUserInput!]
}

input AccountUpdateWithWhereUniqueWithoutUserInput {
  data: AccountUpdateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountUpdateWithoutUserInput {
  access_token: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expires_at: NullableIntFieldUpdateOperationsInput
  id_token: NullableStringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  refresh_token: NullableStringFieldUpdateOperationsInput
  scope: NullableStringFieldUpdateOperationsInput
  session_state: NullableStringFieldUpdateOperationsInput
  token_type: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AccountUpsertWithWhereUniqueWithoutUserInput {
  create: AccountCreateWithoutUserInput!
  update: AccountUpdateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  access_token: StringNullableFilter
  createdAt: DateTimeFilter
  expires_at: IntNullableFilter
  id_token: StringNullableFilter
  provider: StringFilter
  providerAccountId: StringFilter
  refresh_token: StringNullableFilter
  scope: StringNullableFilter
  session_state: StringNullableFilter
  token_type: StringNullableFilter
  type: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input AccountWhereUniqueInput {
  AND: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  access_token: StringNullableFilter
  createdAt: DateTimeFilter
  expires_at: IntNullableFilter
  id_token: StringNullableFilter
  provider: StringFilter
  providerAccountId: StringFilter
  provider_providerAccountId: AccountProviderProviderAccountIdCompoundUniqueInput
  refresh_token: StringNullableFilter
  scope: StringNullableFilter
  session_state: StringNullableFilter
  token_type: StringNullableFilter
  type: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

type AffectedRowsOutput {
  count: Int!
}

type AggregateAccount {
  _avg: AccountAvgAggregate
  _count: AccountCountAggregate
  _max: AccountMaxAggregate
  _min: AccountMinAggregate
  _sum: AccountSumAggregate
}

type AggregateFile {
  _avg: FileAvgAggregate
  _count: FileCountAggregate
  _max: FileMaxAggregate
  _min: FileMinAggregate
  _sum: FileSumAggregate
}

type AggregatePasswordResetToken {
  _count: PasswordResetTokenCountAggregate
  _max: PasswordResetTokenMaxAggregate
  _min: PasswordResetTokenMinAggregate
}

type AggregateStatus {
  _count: StatusCountAggregate
  _max: StatusMaxAggregate
  _min: StatusMinAggregate
}

type AggregateTask {
  _count: TaskCountAggregate
  _max: TaskMaxAggregate
  _min: TaskMinAggregate
}

type AggregateTwoFactorConfirnation {
  _count: TwoFactorConfirnationCountAggregate
  _max: TwoFactorConfirnationMaxAggregate
  _min: TwoFactorConfirnationMinAggregate
}

type AggregateTwoFactorToken {
  _count: TwoFactorTokenCountAggregate
  _max: TwoFactorTokenMaxAggregate
  _min: TwoFactorTokenMinAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

type AggregateVerificationToken {
  _count: VerificationTokenCountAggregate
  _max: VerificationTokenMaxAggregate
  _min: VerificationTokenMinAggregate
}

type AggregateWorkspace {
  _count: WorkspaceCountAggregate
  _max: WorkspaceMaxAggregate
  _min: WorkspaceMinAggregate
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

type CreateManyAndReturnAccount {
  access_token: String
  createdAt: DateTimeISO!
  expires_at: Int
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  updatedAt: DateTimeISO!
  user: User!
  userId: String!
}

type CreateManyAndReturnFile {
  fileId: String!
  id: Int!
  name: String!
  task(where: TaskWhereInput): Task
  taskId: String
  url: String!
}

type CreateManyAndReturnPasswordResetToken {
  email: String!
  expires: DateTimeISO!
  id: String!
  token: String!
}

type CreateManyAndReturnStatus {
  color: String!
  id: String!
  name: String
  type: StatusType!
  user: User!
  userId: String!
}

type CreateManyAndReturnTask {
  createdAt: DateTimeISO!
  dueDate: DateTimeISO
  id: String!
  message: String
  name: String!
  note: String
  priority(where: StatusWhereInput): Status
  priorityId: String
  status(where: StatusWhereInput): Status
  statusId: String
  updatedAt: DateTimeISO!
  workspace(where: WorkspaceWhereInput): Workspace
  workspaceId: String!
}

type CreateManyAndReturnTwoFactorConfirnation {
  id: String!
  user: User!
  userId: String!
}

type CreateManyAndReturnTwoFactorToken {
  email: String!
  expires: DateTimeISO!
  id: String!
  token: String!
}

type CreateManyAndReturnUser {
  createdAt: DateTimeISO!
  email: String!
  emailVerified: DateTimeISO
  id: String!
  image: String
  imageId: String
  isTwoFactorEnable: Boolean!
  name: String!
  password: String
  role: Role!
  updatedAt: DateTimeISO!
}

type CreateManyAndReturnVerificationToken {
  email: String!
  expires: DateTimeISO!
  id: String!
  token: String!
}

type CreateManyAndReturnWorkspace {
  createdAt: DateTimeISO!
  description: String
  id: String!
  name: String!
  updatedAt: DateTimeISO!
  user(where: UserWhereInput): User
  userId: String
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTimeISO
}

input DateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input DateTimeNullableFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableFilter
  notIn: [DateTimeISO!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input EnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input EnumRoleWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumRoleFilter
  _min: NestedEnumRoleFilter
  equals: Role
  in: [Role!]
  not: NestedEnumRoleWithAggregatesFilter
  notIn: [Role!]
}

input EnumStatusTypeFieldUpdateOperationsInput {
  set: StatusType
}

input EnumStatusTypeFilter {
  equals: StatusType
  in: [StatusType!]
  not: NestedEnumStatusTypeFilter
  notIn: [StatusType!]
}

input EnumStatusTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumStatusTypeFilter
  _min: NestedEnumStatusTypeFilter
  equals: StatusType
  in: [StatusType!]
  not: NestedEnumStatusTypeWithAggregatesFilter
  notIn: [StatusType!]
}

type File {
  fileId: String!
  id: Int!
  name: String!
  task(where: TaskWhereInput): Task
  taskId: String
  url: String!
}

type FileAvgAggregate {
  id: Float
}

input FileAvgOrderByAggregateInput {
  id: SortOrder
}

type FileCountAggregate {
  _all: Int!
  fileId: Int!
  id: Int!
  name: Int!
  taskId: Int!
  url: Int!
}

input FileCountOrderByAggregateInput {
  fileId: SortOrder
  id: SortOrder
  name: SortOrder
  taskId: SortOrder
  url: SortOrder
}

input FileCreateInput {
  fileId: String!
  name: String!
  task: TaskCreateNestedOneWithoutFilesInput
  url: String!
}

input FileCreateManyInput {
  fileId: String!
  id: Int
  name: String!
  taskId: String
  url: String!
}

input FileCreateManyTaskInput {
  fileId: String!
  id: Int
  name: String!
  url: String!
}

input FileCreateManyTaskInputEnvelope {
  data: [FileCreateManyTaskInput!]!
  skipDuplicates: Boolean
}

input FileCreateNestedManyWithoutTaskInput {
  connect: [FileWhereUniqueInput!]
  connectOrCreate: [FileCreateOrConnectWithoutTaskInput!]
  create: [FileCreateWithoutTaskInput!]
  createMany: FileCreateManyTaskInputEnvelope
}

input FileCreateOrConnectWithoutTaskInput {
  create: FileCreateWithoutTaskInput!
  where: FileWhereUniqueInput!
}

input FileCreateWithoutTaskInput {
  fileId: String!
  name: String!
  url: String!
}

type FileGroupBy {
  _avg: FileAvgAggregate
  _count: FileCountAggregate
  _max: FileMaxAggregate
  _min: FileMinAggregate
  _sum: FileSumAggregate
  fileId: String!
  id: Int!
  name: String!
  taskId: String
  url: String!
}

input FileListRelationFilter {
  every: FileWhereInput
  none: FileWhereInput
  some: FileWhereInput
}

type FileMaxAggregate {
  fileId: String
  id: Int
  name: String
  taskId: String
  url: String
}

input FileMaxOrderByAggregateInput {
  fileId: SortOrder
  id: SortOrder
  name: SortOrder
  taskId: SortOrder
  url: SortOrder
}

type FileMinAggregate {
  fileId: String
  id: Int
  name: String
  taskId: String
  url: String
}

input FileMinOrderByAggregateInput {
  fileId: SortOrder
  id: SortOrder
  name: SortOrder
  taskId: SortOrder
  url: SortOrder
}

input FileOrderByRelationAggregateInput {
  _count: SortOrder
}

input FileOrderByWithAggregationInput {
  _avg: FileAvgOrderByAggregateInput
  _count: FileCountOrderByAggregateInput
  _max: FileMaxOrderByAggregateInput
  _min: FileMinOrderByAggregateInput
  _sum: FileSumOrderByAggregateInput
  fileId: SortOrder
  id: SortOrder
  name: SortOrder
  taskId: SortOrderInput
  url: SortOrder
}

input FileOrderByWithRelationInput {
  fileId: SortOrder
  id: SortOrder
  name: SortOrder
  task: TaskOrderByWithRelationInput
  taskId: SortOrderInput
  url: SortOrder
}

enum FileScalarFieldEnum {
  fileId
  id
  name
  taskId
  url
}

input FileScalarWhereInput {
  AND: [FileScalarWhereInput!]
  NOT: [FileScalarWhereInput!]
  OR: [FileScalarWhereInput!]
  fileId: StringFilter
  id: IntFilter
  name: StringFilter
  taskId: StringNullableFilter
  url: StringFilter
}

input FileScalarWhereWithAggregatesInput {
  AND: [FileScalarWhereWithAggregatesInput!]
  NOT: [FileScalarWhereWithAggregatesInput!]
  OR: [FileScalarWhereWithAggregatesInput!]
  fileId: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  taskId: StringNullableWithAggregatesFilter
  url: StringWithAggregatesFilter
}

type FileSumAggregate {
  id: Int
}

input FileSumOrderByAggregateInput {
  id: SortOrder
}

input FileUpdateInput {
  fileId: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  task: TaskUpdateOneWithoutFilesNestedInput
  url: StringFieldUpdateOperationsInput
}

input FileUpdateManyMutationInput {
  fileId: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input FileUpdateManyWithWhereWithoutTaskInput {
  data: FileUpdateManyMutationInput!
  where: FileScalarWhereInput!
}

input FileUpdateManyWithoutTaskNestedInput {
  connect: [FileWhereUniqueInput!]
  connectOrCreate: [FileCreateOrConnectWithoutTaskInput!]
  create: [FileCreateWithoutTaskInput!]
  createMany: FileCreateManyTaskInputEnvelope
  delete: [FileWhereUniqueInput!]
  deleteMany: [FileScalarWhereInput!]
  disconnect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutTaskInput!]
  updateMany: [FileUpdateManyWithWhereWithoutTaskInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutTaskInput!]
}

input FileUpdateWithWhereUniqueWithoutTaskInput {
  data: FileUpdateWithoutTaskInput!
  where: FileWhereUniqueInput!
}

input FileUpdateWithoutTaskInput {
  fileId: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
}

input FileUpsertWithWhereUniqueWithoutTaskInput {
  create: FileCreateWithoutTaskInput!
  update: FileUpdateWithoutTaskInput!
  where: FileWhereUniqueInput!
}

input FileWhereInput {
  AND: [FileWhereInput!]
  NOT: [FileWhereInput!]
  OR: [FileWhereInput!]
  fileId: StringFilter
  id: IntFilter
  name: StringFilter
  task: TaskNullableRelationFilter
  taskId: StringNullableFilter
  url: StringFilter
}

input FileWhereUniqueInput {
  AND: [FileWhereInput!]
  NOT: [FileWhereInput!]
  OR: [FileWhereInput!]
  fileId: String
  id: Int
  name: StringFilter
  task: TaskNullableRelationFilter
  taskId: StringNullableFilter
  url: StringFilter
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Mutation {
  createManyAccount(data: [AccountCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyAndReturnAccount(data: [AccountCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnAccount!]!
  createManyAndReturnFile(data: [FileCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnFile!]!
  createManyAndReturnPasswordResetToken(data: [PasswordResetTokenCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnPasswordResetToken!]!
  createManyAndReturnStatus(data: [StatusCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnStatus!]!
  createManyAndReturnTask(data: [TaskCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnTask!]!
  createManyAndReturnTwoFactorConfirnation(data: [TwoFactorConfirnationCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnTwoFactorConfirnation!]!
  createManyAndReturnTwoFactorToken(data: [TwoFactorTokenCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnTwoFactorToken!]!
  createManyAndReturnUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnUser!]!
  createManyAndReturnVerificationToken(data: [VerificationTokenCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnVerificationToken!]!
  createManyAndReturnWorkspace(data: [WorkspaceCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnWorkspace!]!
  createManyFile(data: [FileCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPasswordResetToken(data: [PasswordResetTokenCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyStatus(data: [StatusCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyTask(data: [TaskCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyTwoFactorConfirnation(data: [TwoFactorConfirnationCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyTwoFactorToken(data: [TwoFactorTokenCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyVerificationToken(data: [VerificationTokenCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyWorkspace(data: [WorkspaceCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneAccount(data: AccountCreateInput!): Account!
  createOneFile(data: FileCreateInput!): File!
  createOnePasswordResetToken(data: PasswordResetTokenCreateInput!): PasswordResetToken!
  createOneStatus(data: StatusCreateInput!): Status!
  createOneTask(data: TaskCreateInput!): Task!
  createOneTwoFactorConfirnation(data: TwoFactorConfirnationCreateInput!): TwoFactorConfirnation!
  createOneTwoFactorToken(data: TwoFactorTokenCreateInput!): TwoFactorToken!
  createOneUser(data: UserCreateInput!): User!
  createOneVerificationToken(data: VerificationTokenCreateInput!): VerificationToken!
  createOneWorkspace(data: WorkspaceCreateInput!): Workspace!
  deleteManyAccount(where: AccountWhereInput): AffectedRowsOutput!
  deleteManyFile(where: FileWhereInput): AffectedRowsOutput!
  deleteManyPasswordResetToken(where: PasswordResetTokenWhereInput): AffectedRowsOutput!
  deleteManyStatus(where: StatusWhereInput): AffectedRowsOutput!
  deleteManyTask(where: TaskWhereInput): AffectedRowsOutput!
  deleteManyTwoFactorConfirnation(where: TwoFactorConfirnationWhereInput): AffectedRowsOutput!
  deleteManyTwoFactorToken(where: TwoFactorTokenWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteManyVerificationToken(where: VerificationTokenWhereInput): AffectedRowsOutput!
  deleteManyWorkspace(where: WorkspaceWhereInput): AffectedRowsOutput!
  deleteOneAccount(where: AccountWhereUniqueInput!): Account
  deleteOneFile(where: FileWhereUniqueInput!): File
  deleteOnePasswordResetToken(where: PasswordResetTokenWhereUniqueInput!): PasswordResetToken
  deleteOneStatus(where: StatusWhereUniqueInput!): Status
  deleteOneTask(where: TaskWhereUniqueInput!): Task
  deleteOneTwoFactorConfirnation(where: TwoFactorConfirnationWhereUniqueInput!): TwoFactorConfirnation
  deleteOneTwoFactorToken(where: TwoFactorTokenWhereUniqueInput!): TwoFactorToken
  deleteOneUser(where: UserWhereUniqueInput!): User
  deleteOneVerificationToken(where: VerificationTokenWhereUniqueInput!): VerificationToken
  deleteOneWorkspace(where: WorkspaceWhereUniqueInput!): Workspace
  updateManyAccount(data: AccountUpdateManyMutationInput!, where: AccountWhereInput): AffectedRowsOutput!
  updateManyFile(data: FileUpdateManyMutationInput!, where: FileWhereInput): AffectedRowsOutput!
  updateManyPasswordResetToken(data: PasswordResetTokenUpdateManyMutationInput!, where: PasswordResetTokenWhereInput): AffectedRowsOutput!
  updateManyStatus(data: StatusUpdateManyMutationInput!, where: StatusWhereInput): AffectedRowsOutput!
  updateManyTask(data: TaskUpdateManyMutationInput!, where: TaskWhereInput): AffectedRowsOutput!
  updateManyTwoFactorConfirnation(data: TwoFactorConfirnationUpdateManyMutationInput!, where: TwoFactorConfirnationWhereInput): AffectedRowsOutput!
  updateManyTwoFactorToken(data: TwoFactorTokenUpdateManyMutationInput!, where: TwoFactorTokenWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateManyVerificationToken(data: VerificationTokenUpdateManyMutationInput!, where: VerificationTokenWhereInput): AffectedRowsOutput!
  updateManyWorkspace(data: WorkspaceUpdateManyMutationInput!, where: WorkspaceWhereInput): AffectedRowsOutput!
  updateOneAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
  updateOneFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateOnePasswordResetToken(data: PasswordResetTokenUpdateInput!, where: PasswordResetTokenWhereUniqueInput!): PasswordResetToken
  updateOneStatus(data: StatusUpdateInput!, where: StatusWhereUniqueInput!): Status
  updateOneTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  updateOneTwoFactorConfirnation(data: TwoFactorConfirnationUpdateInput!, where: TwoFactorConfirnationWhereUniqueInput!): TwoFactorConfirnation
  updateOneTwoFactorToken(data: TwoFactorTokenUpdateInput!, where: TwoFactorTokenWhereUniqueInput!): TwoFactorToken
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateOneVerificationToken(data: VerificationTokenUpdateInput!, where: VerificationTokenWhereUniqueInput!): VerificationToken
  updateOneWorkspace(data: WorkspaceUpdateInput!, where: WorkspaceWhereUniqueInput!): Workspace
  upsertOneAccount(create: AccountCreateInput!, update: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account!
  upsertOneFile(create: FileCreateInput!, update: FileUpdateInput!, where: FileWhereUniqueInput!): File!
  upsertOnePasswordResetToken(create: PasswordResetTokenCreateInput!, update: PasswordResetTokenUpdateInput!, where: PasswordResetTokenWhereUniqueInput!): PasswordResetToken!
  upsertOneStatus(create: StatusCreateInput!, update: StatusUpdateInput!, where: StatusWhereUniqueInput!): Status!
  upsertOneTask(create: TaskCreateInput!, update: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task!
  upsertOneTwoFactorConfirnation(create: TwoFactorConfirnationCreateInput!, update: TwoFactorConfirnationUpdateInput!, where: TwoFactorConfirnationWhereUniqueInput!): TwoFactorConfirnation!
  upsertOneTwoFactorToken(create: TwoFactorTokenCreateInput!, update: TwoFactorTokenUpdateInput!, where: TwoFactorTokenWhereUniqueInput!): TwoFactorToken!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertOneVerificationToken(create: VerificationTokenCreateInput!, update: VerificationTokenUpdateInput!, where: VerificationTokenWhereUniqueInput!): VerificationToken!
  upsertOneWorkspace(create: WorkspaceCreateInput!, update: WorkspaceUpdateInput!, where: WorkspaceWhereUniqueInput!): Workspace!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeNullableFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role!]
  not: NestedEnumRoleFilter
  notIn: [Role!]
}

input NestedEnumRoleWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumRoleFilter
  _min: NestedEnumRoleFilter
  equals: Role
  in: [Role!]
  not: NestedEnumRoleWithAggregatesFilter
  notIn: [Role!]
}

input NestedEnumStatusTypeFilter {
  equals: StatusType
  in: [StatusType!]
  not: NestedEnumStatusTypeFilter
  notIn: [StatusType!]
}

input NestedEnumStatusTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumStatusTypeFilter
  _min: NestedEnumStatusTypeFilter
  equals: StatusType
  in: [StatusType!]
  not: NestedEnumStatusTypeWithAggregatesFilter
  notIn: [StatusType!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTimeISO
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

enum NullsOrder {
  first
  last
}

type PasswordResetToken {
  email: String!
  expires: DateTimeISO!
  id: String!
  token: String!
}

type PasswordResetTokenCountAggregate {
  _all: Int!
  email: Int!
  expires: Int!
  id: Int!
  token: Int!
}

input PasswordResetTokenCountOrderByAggregateInput {
  email: SortOrder
  expires: SortOrder
  id: SortOrder
  token: SortOrder
}

input PasswordResetTokenCreateInput {
  email: String!
  expires: DateTimeISO!
  id: String
  token: String!
}

input PasswordResetTokenCreateManyInput {
  email: String!
  expires: DateTimeISO!
  id: String
  token: String!
}

input PasswordResetTokenEmailTokenCompoundUniqueInput {
  email: String!
  token: String!
}

type PasswordResetTokenGroupBy {
  _count: PasswordResetTokenCountAggregate
  _max: PasswordResetTokenMaxAggregate
  _min: PasswordResetTokenMinAggregate
  email: String!
  expires: DateTimeISO!
  id: String!
  token: String!
}

type PasswordResetTokenMaxAggregate {
  email: String
  expires: DateTimeISO
  id: String
  token: String
}

input PasswordResetTokenMaxOrderByAggregateInput {
  email: SortOrder
  expires: SortOrder
  id: SortOrder
  token: SortOrder
}

type PasswordResetTokenMinAggregate {
  email: String
  expires: DateTimeISO
  id: String
  token: String
}

input PasswordResetTokenMinOrderByAggregateInput {
  email: SortOrder
  expires: SortOrder
  id: SortOrder
  token: SortOrder
}

input PasswordResetTokenOrderByWithAggregationInput {
  _count: PasswordResetTokenCountOrderByAggregateInput
  _max: PasswordResetTokenMaxOrderByAggregateInput
  _min: PasswordResetTokenMinOrderByAggregateInput
  email: SortOrder
  expires: SortOrder
  id: SortOrder
  token: SortOrder
}

input PasswordResetTokenOrderByWithRelationInput {
  email: SortOrder
  expires: SortOrder
  id: SortOrder
  token: SortOrder
}

enum PasswordResetTokenScalarFieldEnum {
  email
  expires
  id
  token
}

input PasswordResetTokenScalarWhereWithAggregatesInput {
  AND: [PasswordResetTokenScalarWhereWithAggregatesInput!]
  NOT: [PasswordResetTokenScalarWhereWithAggregatesInput!]
  OR: [PasswordResetTokenScalarWhereWithAggregatesInput!]
  email: StringWithAggregatesFilter
  expires: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  token: StringWithAggregatesFilter
}

input PasswordResetTokenUpdateInput {
  email: StringFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input PasswordResetTokenUpdateManyMutationInput {
  email: StringFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input PasswordResetTokenWhereInput {
  AND: [PasswordResetTokenWhereInput!]
  NOT: [PasswordResetTokenWhereInput!]
  OR: [PasswordResetTokenWhereInput!]
  email: StringFilter
  expires: DateTimeFilter
  id: StringFilter
  token: StringFilter
}

input PasswordResetTokenWhereUniqueInput {
  AND: [PasswordResetTokenWhereInput!]
  NOT: [PasswordResetTokenWhereInput!]
  OR: [PasswordResetTokenWhereInput!]
  email: StringFilter
  email_token: PasswordResetTokenEmailTokenCompoundUniqueInput
  expires: DateTimeFilter
  id: String
  token: String
}

type Query {
  account(where: AccountWhereUniqueInput!): Account
  accounts(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): [Account!]!
  aggregateAccount(cursor: AccountWhereUniqueInput, orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): AggregateAccount!
  aggregateFile(cursor: FileWhereUniqueInput, orderBy: [FileOrderByWithRelationInput!], skip: Int, take: Int, where: FileWhereInput): AggregateFile!
  aggregatePasswordResetToken(cursor: PasswordResetTokenWhereUniqueInput, orderBy: [PasswordResetTokenOrderByWithRelationInput!], skip: Int, take: Int, where: PasswordResetTokenWhereInput): AggregatePasswordResetToken!
  aggregateStatus(cursor: StatusWhereUniqueInput, orderBy: [StatusOrderByWithRelationInput!], skip: Int, take: Int, where: StatusWhereInput): AggregateStatus!
  aggregateTask(cursor: TaskWhereUniqueInput, orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): AggregateTask!
  aggregateTwoFactorConfirnation(cursor: TwoFactorConfirnationWhereUniqueInput, orderBy: [TwoFactorConfirnationOrderByWithRelationInput!], skip: Int, take: Int, where: TwoFactorConfirnationWhereInput): AggregateTwoFactorConfirnation!
  aggregateTwoFactorToken(cursor: TwoFactorTokenWhereUniqueInput, orderBy: [TwoFactorTokenOrderByWithRelationInput!], skip: Int, take: Int, where: TwoFactorTokenWhereInput): AggregateTwoFactorToken!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  aggregateVerificationToken(cursor: VerificationTokenWhereUniqueInput, orderBy: [VerificationTokenOrderByWithRelationInput!], skip: Int, take: Int, where: VerificationTokenWhereInput): AggregateVerificationToken!
  aggregateWorkspace(cursor: WorkspaceWhereUniqueInput, orderBy: [WorkspaceOrderByWithRelationInput!], skip: Int, take: Int, where: WorkspaceWhereInput): AggregateWorkspace!
  file(where: FileWhereUniqueInput!): File
  files(cursor: FileWhereUniqueInput, distinct: [FileScalarFieldEnum!], orderBy: [FileOrderByWithRelationInput!], skip: Int, take: Int, where: FileWhereInput): [File!]!
  findFirstAccount(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): Account
  findFirstAccountOrThrow(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): Account
  findFirstFile(cursor: FileWhereUniqueInput, distinct: [FileScalarFieldEnum!], orderBy: [FileOrderByWithRelationInput!], skip: Int, take: Int, where: FileWhereInput): File
  findFirstFileOrThrow(cursor: FileWhereUniqueInput, distinct: [FileScalarFieldEnum!], orderBy: [FileOrderByWithRelationInput!], skip: Int, take: Int, where: FileWhereInput): File
  findFirstPasswordResetToken(cursor: PasswordResetTokenWhereUniqueInput, distinct: [PasswordResetTokenScalarFieldEnum!], orderBy: [PasswordResetTokenOrderByWithRelationInput!], skip: Int, take: Int, where: PasswordResetTokenWhereInput): PasswordResetToken
  findFirstPasswordResetTokenOrThrow(cursor: PasswordResetTokenWhereUniqueInput, distinct: [PasswordResetTokenScalarFieldEnum!], orderBy: [PasswordResetTokenOrderByWithRelationInput!], skip: Int, take: Int, where: PasswordResetTokenWhereInput): PasswordResetToken
  findFirstStatus(cursor: StatusWhereUniqueInput, distinct: [StatusScalarFieldEnum!], orderBy: [StatusOrderByWithRelationInput!], skip: Int, take: Int, where: StatusWhereInput): Status
  findFirstStatusOrThrow(cursor: StatusWhereUniqueInput, distinct: [StatusScalarFieldEnum!], orderBy: [StatusOrderByWithRelationInput!], skip: Int, take: Int, where: StatusWhereInput): Status
  findFirstTask(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): Task
  findFirstTaskOrThrow(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): Task
  findFirstTwoFactorConfirnation(cursor: TwoFactorConfirnationWhereUniqueInput, distinct: [TwoFactorConfirnationScalarFieldEnum!], orderBy: [TwoFactorConfirnationOrderByWithRelationInput!], skip: Int, take: Int, where: TwoFactorConfirnationWhereInput): TwoFactorConfirnation
  findFirstTwoFactorConfirnationOrThrow(cursor: TwoFactorConfirnationWhereUniqueInput, distinct: [TwoFactorConfirnationScalarFieldEnum!], orderBy: [TwoFactorConfirnationOrderByWithRelationInput!], skip: Int, take: Int, where: TwoFactorConfirnationWhereInput): TwoFactorConfirnation
  findFirstTwoFactorToken(cursor: TwoFactorTokenWhereUniqueInput, distinct: [TwoFactorTokenScalarFieldEnum!], orderBy: [TwoFactorTokenOrderByWithRelationInput!], skip: Int, take: Int, where: TwoFactorTokenWhereInput): TwoFactorToken
  findFirstTwoFactorTokenOrThrow(cursor: TwoFactorTokenWhereUniqueInput, distinct: [TwoFactorTokenScalarFieldEnum!], orderBy: [TwoFactorTokenOrderByWithRelationInput!], skip: Int, take: Int, where: TwoFactorTokenWhereInput): TwoFactorToken
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstUserOrThrow(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstVerificationToken(cursor: VerificationTokenWhereUniqueInput, distinct: [VerificationTokenScalarFieldEnum!], orderBy: [VerificationTokenOrderByWithRelationInput!], skip: Int, take: Int, where: VerificationTokenWhereInput): VerificationToken
  findFirstVerificationTokenOrThrow(cursor: VerificationTokenWhereUniqueInput, distinct: [VerificationTokenScalarFieldEnum!], orderBy: [VerificationTokenOrderByWithRelationInput!], skip: Int, take: Int, where: VerificationTokenWhereInput): VerificationToken
  findFirstWorkspace(cursor: WorkspaceWhereUniqueInput, distinct: [WorkspaceScalarFieldEnum!], orderBy: [WorkspaceOrderByWithRelationInput!], skip: Int, take: Int, where: WorkspaceWhereInput): Workspace
  findFirstWorkspaceOrThrow(cursor: WorkspaceWhereUniqueInput, distinct: [WorkspaceScalarFieldEnum!], orderBy: [WorkspaceOrderByWithRelationInput!], skip: Int, take: Int, where: WorkspaceWhereInput): Workspace
  getAccount(where: AccountWhereUniqueInput!): Account
  getFile(where: FileWhereUniqueInput!): File
  getPasswordResetToken(where: PasswordResetTokenWhereUniqueInput!): PasswordResetToken
  getStatus(where: StatusWhereUniqueInput!): Status
  getTask(where: TaskWhereUniqueInput!): Task
  getTwoFactorConfirnation(where: TwoFactorConfirnationWhereUniqueInput!): TwoFactorConfirnation
  getTwoFactorToken(where: TwoFactorTokenWhereUniqueInput!): TwoFactorToken
  getUser(where: UserWhereUniqueInput!): User
  getVerificationToken(where: VerificationTokenWhereUniqueInput!): VerificationToken
  getWorkspace(where: WorkspaceWhereUniqueInput!): Workspace
  groupByAccount(by: [AccountScalarFieldEnum!]!, having: AccountScalarWhereWithAggregatesInput, orderBy: [AccountOrderByWithAggregationInput!], skip: Int, take: Int, where: AccountWhereInput): [AccountGroupBy!]!
  groupByFile(by: [FileScalarFieldEnum!]!, having: FileScalarWhereWithAggregatesInput, orderBy: [FileOrderByWithAggregationInput!], skip: Int, take: Int, where: FileWhereInput): [FileGroupBy!]!
  groupByPasswordResetToken(by: [PasswordResetTokenScalarFieldEnum!]!, having: PasswordResetTokenScalarWhereWithAggregatesInput, orderBy: [PasswordResetTokenOrderByWithAggregationInput!], skip: Int, take: Int, where: PasswordResetTokenWhereInput): [PasswordResetTokenGroupBy!]!
  groupByStatus(by: [StatusScalarFieldEnum!]!, having: StatusScalarWhereWithAggregatesInput, orderBy: [StatusOrderByWithAggregationInput!], skip: Int, take: Int, where: StatusWhereInput): [StatusGroupBy!]!
  groupByTask(by: [TaskScalarFieldEnum!]!, having: TaskScalarWhereWithAggregatesInput, orderBy: [TaskOrderByWithAggregationInput!], skip: Int, take: Int, where: TaskWhereInput): [TaskGroupBy!]!
  groupByTwoFactorConfirnation(by: [TwoFactorConfirnationScalarFieldEnum!]!, having: TwoFactorConfirnationScalarWhereWithAggregatesInput, orderBy: [TwoFactorConfirnationOrderByWithAggregationInput!], skip: Int, take: Int, where: TwoFactorConfirnationWhereInput): [TwoFactorConfirnationGroupBy!]!
  groupByTwoFactorToken(by: [TwoFactorTokenScalarFieldEnum!]!, having: TwoFactorTokenScalarWhereWithAggregatesInput, orderBy: [TwoFactorTokenOrderByWithAggregationInput!], skip: Int, take: Int, where: TwoFactorTokenWhereInput): [TwoFactorTokenGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  groupByVerificationToken(by: [VerificationTokenScalarFieldEnum!]!, having: VerificationTokenScalarWhereWithAggregatesInput, orderBy: [VerificationTokenOrderByWithAggregationInput!], skip: Int, take: Int, where: VerificationTokenWhereInput): [VerificationTokenGroupBy!]!
  groupByWorkspace(by: [WorkspaceScalarFieldEnum!]!, having: WorkspaceScalarWhereWithAggregatesInput, orderBy: [WorkspaceOrderByWithAggregationInput!], skip: Int, take: Int, where: WorkspaceWhereInput): [WorkspaceGroupBy!]!
  passwordResetToken(where: PasswordResetTokenWhereUniqueInput!): PasswordResetToken
  passwordResetTokens(cursor: PasswordResetTokenWhereUniqueInput, distinct: [PasswordResetTokenScalarFieldEnum!], orderBy: [PasswordResetTokenOrderByWithRelationInput!], skip: Int, take: Int, where: PasswordResetTokenWhereInput): [PasswordResetToken!]!
  status(where: StatusWhereUniqueInput!): Status
  statuses(cursor: StatusWhereUniqueInput, distinct: [StatusScalarFieldEnum!], orderBy: [StatusOrderByWithRelationInput!], skip: Int, take: Int, where: StatusWhereInput): [Status!]!
  task(where: TaskWhereUniqueInput!): Task
  tasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]!
  twoFactorConfirnation(where: TwoFactorConfirnationWhereUniqueInput!): TwoFactorConfirnation
  twoFactorConfirnations(cursor: TwoFactorConfirnationWhereUniqueInput, distinct: [TwoFactorConfirnationScalarFieldEnum!], orderBy: [TwoFactorConfirnationOrderByWithRelationInput!], skip: Int, take: Int, where: TwoFactorConfirnationWhereInput): [TwoFactorConfirnation!]!
  twoFactorToken(where: TwoFactorTokenWhereUniqueInput!): TwoFactorToken
  twoFactorTokens(cursor: TwoFactorTokenWhereUniqueInput, distinct: [TwoFactorTokenScalarFieldEnum!], orderBy: [TwoFactorTokenOrderByWithRelationInput!], skip: Int, take: Int, where: TwoFactorTokenWhereInput): [TwoFactorToken!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  verificationToken(where: VerificationTokenWhereUniqueInput!): VerificationToken
  verificationTokens(cursor: VerificationTokenWhereUniqueInput, distinct: [VerificationTokenScalarFieldEnum!], orderBy: [VerificationTokenOrderByWithRelationInput!], skip: Int, take: Int, where: VerificationTokenWhereInput): [VerificationToken!]!
  workspace(where: WorkspaceWhereUniqueInput!): Workspace
  workspaces(cursor: WorkspaceWhereUniqueInput, distinct: [WorkspaceScalarFieldEnum!], orderBy: [WorkspaceOrderByWithRelationInput!], skip: Int, take: Int, where: WorkspaceWhereInput): [Workspace!]!
}

enum QueryMode {
  default
  insensitive
}

enum Role {
  ADMIN
  MEMBER
  USER
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

type Status {
  _count: StatusCount
  color: String!
  id: String!
  name: String
  priorityTasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]!
  statusTasks(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]!
  type: StatusType!
  user: User!
  userId: String!
}

type StatusCount {
  priorityTasks(where: TaskWhereInput): Int!
  statusTasks(where: TaskWhereInput): Int!
}

type StatusCountAggregate {
  _all: Int!
  color: Int!
  id: Int!
  name: Int!
  type: Int!
  userId: Int!
}

input StatusCountOrderByAggregateInput {
  color: SortOrder
  id: SortOrder
  name: SortOrder
  type: SortOrder
  userId: SortOrder
}

input StatusCreateInput {
  color: String!
  id: String
  name: String
  priorityTasks: TaskCreateNestedManyWithoutPriorityInput
  statusTasks: TaskCreateNestedManyWithoutStatusInput
  type: StatusType
  user: UserCreateNestedOneWithoutStatusInput!
}

input StatusCreateManyInput {
  color: String!
  id: String
  name: String
  type: StatusType
  userId: String!
}

input StatusCreateManyUserInput {
  color: String!
  id: String
  name: String
  type: StatusType
}

input StatusCreateManyUserInputEnvelope {
  data: [StatusCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input StatusCreateNestedManyWithoutUserInput {
  connect: [StatusWhereUniqueInput!]
  connectOrCreate: [StatusCreateOrConnectWithoutUserInput!]
  create: [StatusCreateWithoutUserInput!]
  createMany: StatusCreateManyUserInputEnvelope
}

input StatusCreateNestedOneWithoutPriorityTasksInput {
  connect: StatusWhereUniqueInput
  connectOrCreate: StatusCreateOrConnectWithoutPriorityTasksInput
  create: StatusCreateWithoutPriorityTasksInput
}

input StatusCreateNestedOneWithoutStatusTasksInput {
  connect: StatusWhereUniqueInput
  connectOrCreate: StatusCreateOrConnectWithoutStatusTasksInput
  create: StatusCreateWithoutStatusTasksInput
}

input StatusCreateOrConnectWithoutPriorityTasksInput {
  create: StatusCreateWithoutPriorityTasksInput!
  where: StatusWhereUniqueInput!
}

input StatusCreateOrConnectWithoutStatusTasksInput {
  create: StatusCreateWithoutStatusTasksInput!
  where: StatusWhereUniqueInput!
}

input StatusCreateOrConnectWithoutUserInput {
  create: StatusCreateWithoutUserInput!
  where: StatusWhereUniqueInput!
}

input StatusCreateWithoutPriorityTasksInput {
  color: String!
  id: String
  name: String
  statusTasks: TaskCreateNestedManyWithoutStatusInput
  type: StatusType
  user: UserCreateNestedOneWithoutStatusInput!
}

input StatusCreateWithoutStatusTasksInput {
  color: String!
  id: String
  name: String
  priorityTasks: TaskCreateNestedManyWithoutPriorityInput
  type: StatusType
  user: UserCreateNestedOneWithoutStatusInput!
}

input StatusCreateWithoutUserInput {
  color: String!
  id: String
  name: String
  priorityTasks: TaskCreateNestedManyWithoutPriorityInput
  statusTasks: TaskCreateNestedManyWithoutStatusInput
  type: StatusType
}

type StatusGroupBy {
  _count: StatusCountAggregate
  _max: StatusMaxAggregate
  _min: StatusMinAggregate
  color: String!
  id: String!
  name: String
  type: StatusType!
  userId: String!
}

input StatusListRelationFilter {
  every: StatusWhereInput
  none: StatusWhereInput
  some: StatusWhereInput
}

type StatusMaxAggregate {
  color: String
  id: String
  name: String
  type: StatusType
  userId: String
}

input StatusMaxOrderByAggregateInput {
  color: SortOrder
  id: SortOrder
  name: SortOrder
  type: SortOrder
  userId: SortOrder
}

type StatusMinAggregate {
  color: String
  id: String
  name: String
  type: StatusType
  userId: String
}

input StatusMinOrderByAggregateInput {
  color: SortOrder
  id: SortOrder
  name: SortOrder
  type: SortOrder
  userId: SortOrder
}

input StatusNullableRelationFilter {
  is: StatusWhereInput
  isNot: StatusWhereInput
}

input StatusOrderByRelationAggregateInput {
  _count: SortOrder
}

input StatusOrderByWithAggregationInput {
  _count: StatusCountOrderByAggregateInput
  _max: StatusMaxOrderByAggregateInput
  _min: StatusMinOrderByAggregateInput
  color: SortOrder
  id: SortOrder
  name: SortOrderInput
  type: SortOrder
  userId: SortOrder
}

input StatusOrderByWithRelationInput {
  color: SortOrder
  id: SortOrder
  name: SortOrderInput
  priorityTasks: TaskOrderByRelationAggregateInput
  statusTasks: TaskOrderByRelationAggregateInput
  type: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum StatusScalarFieldEnum {
  color
  id
  name
  type
  userId
}

input StatusScalarWhereInput {
  AND: [StatusScalarWhereInput!]
  NOT: [StatusScalarWhereInput!]
  OR: [StatusScalarWhereInput!]
  color: StringFilter
  id: StringFilter
  name: StringNullableFilter
  type: EnumStatusTypeFilter
  userId: StringFilter
}

input StatusScalarWhereWithAggregatesInput {
  AND: [StatusScalarWhereWithAggregatesInput!]
  NOT: [StatusScalarWhereWithAggregatesInput!]
  OR: [StatusScalarWhereWithAggregatesInput!]
  color: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  type: EnumStatusTypeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

enum StatusType {
  PRIORITY
  STATUS
}

input StatusUpdateInput {
  color: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  priorityTasks: TaskUpdateManyWithoutPriorityNestedInput
  statusTasks: TaskUpdateManyWithoutStatusNestedInput
  type: EnumStatusTypeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutStatusNestedInput
}

input StatusUpdateManyMutationInput {
  color: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  type: EnumStatusTypeFieldUpdateOperationsInput
}

input StatusUpdateManyWithWhereWithoutUserInput {
  data: StatusUpdateManyMutationInput!
  where: StatusScalarWhereInput!
}

input StatusUpdateManyWithoutUserNestedInput {
  connect: [StatusWhereUniqueInput!]
  connectOrCreate: [StatusCreateOrConnectWithoutUserInput!]
  create: [StatusCreateWithoutUserInput!]
  createMany: StatusCreateManyUserInputEnvelope
  delete: [StatusWhereUniqueInput!]
  deleteMany: [StatusScalarWhereInput!]
  disconnect: [StatusWhereUniqueInput!]
  set: [StatusWhereUniqueInput!]
  update: [StatusUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [StatusUpdateManyWithWhereWithoutUserInput!]
  upsert: [StatusUpsertWithWhereUniqueWithoutUserInput!]
}

input StatusUpdateOneWithoutPriorityTasksNestedInput {
  connect: StatusWhereUniqueInput
  connectOrCreate: StatusCreateOrConnectWithoutPriorityTasksInput
  create: StatusCreateWithoutPriorityTasksInput
  delete: StatusWhereInput
  disconnect: StatusWhereInput
  update: StatusUpdateToOneWithWhereWithoutPriorityTasksInput
  upsert: StatusUpsertWithoutPriorityTasksInput
}

input StatusUpdateOneWithoutStatusTasksNestedInput {
  connect: StatusWhereUniqueInput
  connectOrCreate: StatusCreateOrConnectWithoutStatusTasksInput
  create: StatusCreateWithoutStatusTasksInput
  delete: StatusWhereInput
  disconnect: StatusWhereInput
  update: StatusUpdateToOneWithWhereWithoutStatusTasksInput
  upsert: StatusUpsertWithoutStatusTasksInput
}

input StatusUpdateToOneWithWhereWithoutPriorityTasksInput {
  data: StatusUpdateWithoutPriorityTasksInput!
  where: StatusWhereInput
}

input StatusUpdateToOneWithWhereWithoutStatusTasksInput {
  data: StatusUpdateWithoutStatusTasksInput!
  where: StatusWhereInput
}

input StatusUpdateWithWhereUniqueWithoutUserInput {
  data: StatusUpdateWithoutUserInput!
  where: StatusWhereUniqueInput!
}

input StatusUpdateWithoutPriorityTasksInput {
  color: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  statusTasks: TaskUpdateManyWithoutStatusNestedInput
  type: EnumStatusTypeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutStatusNestedInput
}

input StatusUpdateWithoutStatusTasksInput {
  color: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  priorityTasks: TaskUpdateManyWithoutPriorityNestedInput
  type: EnumStatusTypeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutStatusNestedInput
}

input StatusUpdateWithoutUserInput {
  color: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  priorityTasks: TaskUpdateManyWithoutPriorityNestedInput
  statusTasks: TaskUpdateManyWithoutStatusNestedInput
  type: EnumStatusTypeFieldUpdateOperationsInput
}

input StatusUpsertWithWhereUniqueWithoutUserInput {
  create: StatusCreateWithoutUserInput!
  update: StatusUpdateWithoutUserInput!
  where: StatusWhereUniqueInput!
}

input StatusUpsertWithoutPriorityTasksInput {
  create: StatusCreateWithoutPriorityTasksInput!
  update: StatusUpdateWithoutPriorityTasksInput!
  where: StatusWhereInput
}

input StatusUpsertWithoutStatusTasksInput {
  create: StatusCreateWithoutStatusTasksInput!
  update: StatusUpdateWithoutStatusTasksInput!
  where: StatusWhereInput
}

input StatusWhereInput {
  AND: [StatusWhereInput!]
  NOT: [StatusWhereInput!]
  OR: [StatusWhereInput!]
  color: StringFilter
  id: StringFilter
  name: StringNullableFilter
  priorityTasks: TaskListRelationFilter
  statusTasks: TaskListRelationFilter
  type: EnumStatusTypeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input StatusWhereUniqueInput {
  AND: [StatusWhereInput!]
  NOT: [StatusWhereInput!]
  OR: [StatusWhereInput!]
  color: StringFilter
  id: String
  name: StringNullableFilter
  priorityTasks: TaskListRelationFilter
  statusTasks: TaskListRelationFilter
  type: EnumStatusTypeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type Task {
  _count: TaskCount
  createdAt: DateTimeISO!
  dueDate: DateTimeISO
  files(cursor: FileWhereUniqueInput, distinct: [FileScalarFieldEnum!], orderBy: [FileOrderByWithRelationInput!], skip: Int, take: Int, where: FileWhereInput): [File!]!
  id: String!
  message: String
  name: String!
  note: String
  priority(where: StatusWhereInput): Status
  priorityId: String
  status(where: StatusWhereInput): Status
  statusId: String
  updatedAt: DateTimeISO!
  workspace(where: WorkspaceWhereInput): Workspace
  workspaceId: String!
}

type TaskCount {
  files(where: FileWhereInput): Int!
}

type TaskCountAggregate {
  _all: Int!
  createdAt: Int!
  dueDate: Int!
  id: Int!
  message: Int!
  name: Int!
  note: Int!
  priorityId: Int!
  statusId: Int!
  updatedAt: Int!
  workspaceId: Int!
}

input TaskCountOrderByAggregateInput {
  createdAt: SortOrder
  dueDate: SortOrder
  id: SortOrder
  message: SortOrder
  name: SortOrder
  note: SortOrder
  priorityId: SortOrder
  statusId: SortOrder
  updatedAt: SortOrder
  workspaceId: SortOrder
}

input TaskCreateInput {
  createdAt: DateTimeISO
  dueDate: DateTimeISO
  files: FileCreateNestedManyWithoutTaskInput
  id: String
  message: String
  name: String!
  note: String
  priority: StatusCreateNestedOneWithoutPriorityTasksInput
  status: StatusCreateNestedOneWithoutStatusTasksInput
  updatedAt: DateTimeISO
  workspace: WorkspaceCreateNestedOneWithoutTaskInput
}

input TaskCreateManyInput {
  createdAt: DateTimeISO
  dueDate: DateTimeISO
  id: String
  message: String
  name: String!
  note: String
  priorityId: String
  statusId: String
  updatedAt: DateTimeISO
  workspaceId: String!
}

input TaskCreateManyPriorityInput {
  createdAt: DateTimeISO
  dueDate: DateTimeISO
  id: String
  message: String
  name: String!
  note: String
  statusId: String
  updatedAt: DateTimeISO
  workspaceId: String!
}

input TaskCreateManyPriorityInputEnvelope {
  data: [TaskCreateManyPriorityInput!]!
  skipDuplicates: Boolean
}

input TaskCreateManyStatusInput {
  createdAt: DateTimeISO
  dueDate: DateTimeISO
  id: String
  message: String
  name: String!
  note: String
  priorityId: String
  updatedAt: DateTimeISO
  workspaceId: String!
}

input TaskCreateManyStatusInputEnvelope {
  data: [TaskCreateManyStatusInput!]!
  skipDuplicates: Boolean
}

input TaskCreateManyWorkspaceInput {
  createdAt: DateTimeISO
  dueDate: DateTimeISO
  id: String
  message: String
  name: String!
  note: String
  priorityId: String
  statusId: String
  updatedAt: DateTimeISO
}

input TaskCreateManyWorkspaceInputEnvelope {
  data: [TaskCreateManyWorkspaceInput!]!
  skipDuplicates: Boolean
}

input TaskCreateNestedManyWithoutPriorityInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutPriorityInput!]
  create: [TaskCreateWithoutPriorityInput!]
  createMany: TaskCreateManyPriorityInputEnvelope
}

input TaskCreateNestedManyWithoutStatusInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutStatusInput!]
  create: [TaskCreateWithoutStatusInput!]
  createMany: TaskCreateManyStatusInputEnvelope
}

input TaskCreateNestedManyWithoutWorkspaceInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutWorkspaceInput!]
  create: [TaskCreateWithoutWorkspaceInput!]
  createMany: TaskCreateManyWorkspaceInputEnvelope
}

input TaskCreateNestedOneWithoutFilesInput {
  connect: TaskWhereUniqueInput
  connectOrCreate: TaskCreateOrConnectWithoutFilesInput
  create: TaskCreateWithoutFilesInput
}

input TaskCreateOrConnectWithoutFilesInput {
  create: TaskCreateWithoutFilesInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateOrConnectWithoutPriorityInput {
  create: TaskCreateWithoutPriorityInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateOrConnectWithoutStatusInput {
  create: TaskCreateWithoutStatusInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateOrConnectWithoutWorkspaceInput {
  create: TaskCreateWithoutWorkspaceInput!
  where: TaskWhereUniqueInput!
}

input TaskCreateWithoutFilesInput {
  createdAt: DateTimeISO
  dueDate: DateTimeISO
  id: String
  message: String
  name: String!
  note: String
  priority: StatusCreateNestedOneWithoutPriorityTasksInput
  status: StatusCreateNestedOneWithoutStatusTasksInput
  updatedAt: DateTimeISO
  workspace: WorkspaceCreateNestedOneWithoutTaskInput
}

input TaskCreateWithoutPriorityInput {
  createdAt: DateTimeISO
  dueDate: DateTimeISO
  files: FileCreateNestedManyWithoutTaskInput
  id: String
  message: String
  name: String!
  note: String
  status: StatusCreateNestedOneWithoutStatusTasksInput
  updatedAt: DateTimeISO
  workspace: WorkspaceCreateNestedOneWithoutTaskInput
}

input TaskCreateWithoutStatusInput {
  createdAt: DateTimeISO
  dueDate: DateTimeISO
  files: FileCreateNestedManyWithoutTaskInput
  id: String
  message: String
  name: String!
  note: String
  priority: StatusCreateNestedOneWithoutPriorityTasksInput
  updatedAt: DateTimeISO
  workspace: WorkspaceCreateNestedOneWithoutTaskInput
}

input TaskCreateWithoutWorkspaceInput {
  createdAt: DateTimeISO
  dueDate: DateTimeISO
  files: FileCreateNestedManyWithoutTaskInput
  id: String
  message: String
  name: String!
  note: String
  priority: StatusCreateNestedOneWithoutPriorityTasksInput
  status: StatusCreateNestedOneWithoutStatusTasksInput
  updatedAt: DateTimeISO
}

type TaskGroupBy {
  _count: TaskCountAggregate
  _max: TaskMaxAggregate
  _min: TaskMinAggregate
  createdAt: DateTimeISO!
  dueDate: DateTimeISO
  id: String!
  message: String
  name: String!
  note: String
  priorityId: String
  statusId: String
  updatedAt: DateTimeISO!
  workspaceId: String!
}

input TaskListRelationFilter {
  every: TaskWhereInput
  none: TaskWhereInput
  some: TaskWhereInput
}

type TaskMaxAggregate {
  createdAt: DateTimeISO
  dueDate: DateTimeISO
  id: String
  message: String
  name: String
  note: String
  priorityId: String
  statusId: String
  updatedAt: DateTimeISO
  workspaceId: String
}

input TaskMaxOrderByAggregateInput {
  createdAt: SortOrder
  dueDate: SortOrder
  id: SortOrder
  message: SortOrder
  name: SortOrder
  note: SortOrder
  priorityId: SortOrder
  statusId: SortOrder
  updatedAt: SortOrder
  workspaceId: SortOrder
}

type TaskMinAggregate {
  createdAt: DateTimeISO
  dueDate: DateTimeISO
  id: String
  message: String
  name: String
  note: String
  priorityId: String
  statusId: String
  updatedAt: DateTimeISO
  workspaceId: String
}

input TaskMinOrderByAggregateInput {
  createdAt: SortOrder
  dueDate: SortOrder
  id: SortOrder
  message: SortOrder
  name: SortOrder
  note: SortOrder
  priorityId: SortOrder
  statusId: SortOrder
  updatedAt: SortOrder
  workspaceId: SortOrder
}

input TaskNullableRelationFilter {
  is: TaskWhereInput
  isNot: TaskWhereInput
}

input TaskOrderByRelationAggregateInput {
  _count: SortOrder
}

input TaskOrderByWithAggregationInput {
  _count: TaskCountOrderByAggregateInput
  _max: TaskMaxOrderByAggregateInput
  _min: TaskMinOrderByAggregateInput
  createdAt: SortOrder
  dueDate: SortOrderInput
  id: SortOrder
  message: SortOrderInput
  name: SortOrder
  note: SortOrderInput
  priorityId: SortOrderInput
  statusId: SortOrderInput
  updatedAt: SortOrder
  workspaceId: SortOrder
}

input TaskOrderByWithRelationInput {
  createdAt: SortOrder
  dueDate: SortOrderInput
  files: FileOrderByRelationAggregateInput
  id: SortOrder
  message: SortOrderInput
  name: SortOrder
  note: SortOrderInput
  priority: StatusOrderByWithRelationInput
  priorityId: SortOrderInput
  status: StatusOrderByWithRelationInput
  statusId: SortOrderInput
  updatedAt: SortOrder
  workspace: WorkspaceOrderByWithRelationInput
  workspaceId: SortOrder
}

enum TaskScalarFieldEnum {
  createdAt
  dueDate
  id
  message
  name
  note
  priorityId
  statusId
  updatedAt
  workspaceId
}

input TaskScalarWhereInput {
  AND: [TaskScalarWhereInput!]
  NOT: [TaskScalarWhereInput!]
  OR: [TaskScalarWhereInput!]
  createdAt: DateTimeFilter
  dueDate: DateTimeNullableFilter
  id: StringFilter
  message: StringNullableFilter
  name: StringFilter
  note: StringNullableFilter
  priorityId: StringNullableFilter
  statusId: StringNullableFilter
  updatedAt: DateTimeFilter
  workspaceId: StringFilter
}

input TaskScalarWhereWithAggregatesInput {
  AND: [TaskScalarWhereWithAggregatesInput!]
  NOT: [TaskScalarWhereWithAggregatesInput!]
  OR: [TaskScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  dueDate: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  message: StringNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  note: StringNullableWithAggregatesFilter
  priorityId: StringNullableWithAggregatesFilter
  statusId: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  workspaceId: StringWithAggregatesFilter
}

input TaskUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  dueDate: NullableDateTimeFieldUpdateOperationsInput
  files: FileUpdateManyWithoutTaskNestedInput
  id: StringFieldUpdateOperationsInput
  message: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  priority: StatusUpdateOneWithoutPriorityTasksNestedInput
  status: StatusUpdateOneWithoutStatusTasksNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  workspace: WorkspaceUpdateOneWithoutTaskNestedInput
}

input TaskUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  dueDate: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  message: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TaskUpdateManyWithWhereWithoutPriorityInput {
  data: TaskUpdateManyMutationInput!
  where: TaskScalarWhereInput!
}

input TaskUpdateManyWithWhereWithoutStatusInput {
  data: TaskUpdateManyMutationInput!
  where: TaskScalarWhereInput!
}

input TaskUpdateManyWithWhereWithoutWorkspaceInput {
  data: TaskUpdateManyMutationInput!
  where: TaskScalarWhereInput!
}

input TaskUpdateManyWithoutPriorityNestedInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutPriorityInput!]
  create: [TaskCreateWithoutPriorityInput!]
  createMany: TaskCreateManyPriorityInputEnvelope
  delete: [TaskWhereUniqueInput!]
  deleteMany: [TaskScalarWhereInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutPriorityInput!]
  updateMany: [TaskUpdateManyWithWhereWithoutPriorityInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutPriorityInput!]
}

input TaskUpdateManyWithoutStatusNestedInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutStatusInput!]
  create: [TaskCreateWithoutStatusInput!]
  createMany: TaskCreateManyStatusInputEnvelope
  delete: [TaskWhereUniqueInput!]
  deleteMany: [TaskScalarWhereInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutStatusInput!]
  updateMany: [TaskUpdateManyWithWhereWithoutStatusInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutStatusInput!]
}

input TaskUpdateManyWithoutWorkspaceNestedInput {
  connect: [TaskWhereUniqueInput!]
  connectOrCreate: [TaskCreateOrConnectWithoutWorkspaceInput!]
  create: [TaskCreateWithoutWorkspaceInput!]
  createMany: TaskCreateManyWorkspaceInputEnvelope
  delete: [TaskWhereUniqueInput!]
  deleteMany: [TaskScalarWhereInput!]
  disconnect: [TaskWhereUniqueInput!]
  set: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutWorkspaceInput!]
  updateMany: [TaskUpdateManyWithWhereWithoutWorkspaceInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutWorkspaceInput!]
}

input TaskUpdateOneWithoutFilesNestedInput {
  connect: TaskWhereUniqueInput
  connectOrCreate: TaskCreateOrConnectWithoutFilesInput
  create: TaskCreateWithoutFilesInput
  delete: TaskWhereInput
  disconnect: TaskWhereInput
  update: TaskUpdateToOneWithWhereWithoutFilesInput
  upsert: TaskUpsertWithoutFilesInput
}

input TaskUpdateToOneWithWhereWithoutFilesInput {
  data: TaskUpdateWithoutFilesInput!
  where: TaskWhereInput
}

input TaskUpdateWithWhereUniqueWithoutPriorityInput {
  data: TaskUpdateWithoutPriorityInput!
  where: TaskWhereUniqueInput!
}

input TaskUpdateWithWhereUniqueWithoutStatusInput {
  data: TaskUpdateWithoutStatusInput!
  where: TaskWhereUniqueInput!
}

input TaskUpdateWithWhereUniqueWithoutWorkspaceInput {
  data: TaskUpdateWithoutWorkspaceInput!
  where: TaskWhereUniqueInput!
}

input TaskUpdateWithoutFilesInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  dueDate: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  message: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  priority: StatusUpdateOneWithoutPriorityTasksNestedInput
  status: StatusUpdateOneWithoutStatusTasksNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  workspace: WorkspaceUpdateOneWithoutTaskNestedInput
}

input TaskUpdateWithoutPriorityInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  dueDate: NullableDateTimeFieldUpdateOperationsInput
  files: FileUpdateManyWithoutTaskNestedInput
  id: StringFieldUpdateOperationsInput
  message: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  status: StatusUpdateOneWithoutStatusTasksNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  workspace: WorkspaceUpdateOneWithoutTaskNestedInput
}

input TaskUpdateWithoutStatusInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  dueDate: NullableDateTimeFieldUpdateOperationsInput
  files: FileUpdateManyWithoutTaskNestedInput
  id: StringFieldUpdateOperationsInput
  message: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  priority: StatusUpdateOneWithoutPriorityTasksNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  workspace: WorkspaceUpdateOneWithoutTaskNestedInput
}

input TaskUpdateWithoutWorkspaceInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  dueDate: NullableDateTimeFieldUpdateOperationsInput
  files: FileUpdateManyWithoutTaskNestedInput
  id: StringFieldUpdateOperationsInput
  message: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  note: NullableStringFieldUpdateOperationsInput
  priority: StatusUpdateOneWithoutPriorityTasksNestedInput
  status: StatusUpdateOneWithoutStatusTasksNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input TaskUpsertWithWhereUniqueWithoutPriorityInput {
  create: TaskCreateWithoutPriorityInput!
  update: TaskUpdateWithoutPriorityInput!
  where: TaskWhereUniqueInput!
}

input TaskUpsertWithWhereUniqueWithoutStatusInput {
  create: TaskCreateWithoutStatusInput!
  update: TaskUpdateWithoutStatusInput!
  where: TaskWhereUniqueInput!
}

input TaskUpsertWithWhereUniqueWithoutWorkspaceInput {
  create: TaskCreateWithoutWorkspaceInput!
  update: TaskUpdateWithoutWorkspaceInput!
  where: TaskWhereUniqueInput!
}

input TaskUpsertWithoutFilesInput {
  create: TaskCreateWithoutFilesInput!
  update: TaskUpdateWithoutFilesInput!
  where: TaskWhereInput
}

input TaskWhereInput {
  AND: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  createdAt: DateTimeFilter
  dueDate: DateTimeNullableFilter
  files: FileListRelationFilter
  id: StringFilter
  message: StringNullableFilter
  name: StringFilter
  note: StringNullableFilter
  priority: StatusNullableRelationFilter
  priorityId: StringNullableFilter
  status: StatusNullableRelationFilter
  statusId: StringNullableFilter
  updatedAt: DateTimeFilter
  workspace: WorkspaceNullableRelationFilter
  workspaceId: StringFilter
}

input TaskWhereUniqueInput {
  AND: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  createdAt: DateTimeFilter
  dueDate: DateTimeNullableFilter
  files: FileListRelationFilter
  id: String
  message: StringNullableFilter
  name: StringFilter
  note: StringNullableFilter
  priority: StatusNullableRelationFilter
  priorityId: StringNullableFilter
  status: StatusNullableRelationFilter
  statusId: StringNullableFilter
  updatedAt: DateTimeFilter
  workspace: WorkspaceNullableRelationFilter
  workspaceId: StringFilter
}

type TwoFactorConfirnation {
  id: String!
  user: User!
  userId: String!
}

type TwoFactorConfirnationCountAggregate {
  _all: Int!
  id: Int!
  userId: Int!
}

input TwoFactorConfirnationCountOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
}

input TwoFactorConfirnationCreateInput {
  id: String
  user: UserCreateNestedOneWithoutTwoFactorConfirnationInput!
}

input TwoFactorConfirnationCreateManyInput {
  id: String
  userId: String!
}

input TwoFactorConfirnationCreateNestedOneWithoutUserInput {
  connect: TwoFactorConfirnationWhereUniqueInput
  connectOrCreate: TwoFactorConfirnationCreateOrConnectWithoutUserInput
  create: TwoFactorConfirnationCreateWithoutUserInput
}

input TwoFactorConfirnationCreateOrConnectWithoutUserInput {
  create: TwoFactorConfirnationCreateWithoutUserInput!
  where: TwoFactorConfirnationWhereUniqueInput!
}

input TwoFactorConfirnationCreateWithoutUserInput {
  id: String
}

type TwoFactorConfirnationGroupBy {
  _count: TwoFactorConfirnationCountAggregate
  _max: TwoFactorConfirnationMaxAggregate
  _min: TwoFactorConfirnationMinAggregate
  id: String!
  userId: String!
}

type TwoFactorConfirnationMaxAggregate {
  id: String
  userId: String
}

input TwoFactorConfirnationMaxOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
}

type TwoFactorConfirnationMinAggregate {
  id: String
  userId: String
}

input TwoFactorConfirnationMinOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
}

input TwoFactorConfirnationNullableRelationFilter {
  is: TwoFactorConfirnationWhereInput
  isNot: TwoFactorConfirnationWhereInput
}

input TwoFactorConfirnationOrderByWithAggregationInput {
  _count: TwoFactorConfirnationCountOrderByAggregateInput
  _max: TwoFactorConfirnationMaxOrderByAggregateInput
  _min: TwoFactorConfirnationMinOrderByAggregateInput
  id: SortOrder
  userId: SortOrder
}

input TwoFactorConfirnationOrderByWithRelationInput {
  id: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum TwoFactorConfirnationScalarFieldEnum {
  id
  userId
}

input TwoFactorConfirnationScalarWhereWithAggregatesInput {
  AND: [TwoFactorConfirnationScalarWhereWithAggregatesInput!]
  NOT: [TwoFactorConfirnationScalarWhereWithAggregatesInput!]
  OR: [TwoFactorConfirnationScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input TwoFactorConfirnationUpdateInput {
  id: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutTwoFactorConfirnationNestedInput
}

input TwoFactorConfirnationUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
}

input TwoFactorConfirnationUpdateOneWithoutUserNestedInput {
  connect: TwoFactorConfirnationWhereUniqueInput
  connectOrCreate: TwoFactorConfirnationCreateOrConnectWithoutUserInput
  create: TwoFactorConfirnationCreateWithoutUserInput
  delete: TwoFactorConfirnationWhereInput
  disconnect: TwoFactorConfirnationWhereInput
  update: TwoFactorConfirnationUpdateToOneWithWhereWithoutUserInput
  upsert: TwoFactorConfirnationUpsertWithoutUserInput
}

input TwoFactorConfirnationUpdateToOneWithWhereWithoutUserInput {
  data: TwoFactorConfirnationUpdateWithoutUserInput!
  where: TwoFactorConfirnationWhereInput
}

input TwoFactorConfirnationUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
}

input TwoFactorConfirnationUpsertWithoutUserInput {
  create: TwoFactorConfirnationCreateWithoutUserInput!
  update: TwoFactorConfirnationUpdateWithoutUserInput!
  where: TwoFactorConfirnationWhereInput
}

input TwoFactorConfirnationWhereInput {
  AND: [TwoFactorConfirnationWhereInput!]
  NOT: [TwoFactorConfirnationWhereInput!]
  OR: [TwoFactorConfirnationWhereInput!]
  id: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input TwoFactorConfirnationWhereUniqueInput {
  AND: [TwoFactorConfirnationWhereInput!]
  NOT: [TwoFactorConfirnationWhereInput!]
  OR: [TwoFactorConfirnationWhereInput!]
  id: String
  user: UserRelationFilter
  userId: String
}

type TwoFactorToken {
  email: String!
  expires: DateTimeISO!
  id: String!
  token: String!
}

type TwoFactorTokenCountAggregate {
  _all: Int!
  email: Int!
  expires: Int!
  id: Int!
  token: Int!
}

input TwoFactorTokenCountOrderByAggregateInput {
  email: SortOrder
  expires: SortOrder
  id: SortOrder
  token: SortOrder
}

input TwoFactorTokenCreateInput {
  email: String!
  expires: DateTimeISO!
  id: String
  token: String!
}

input TwoFactorTokenCreateManyInput {
  email: String!
  expires: DateTimeISO!
  id: String
  token: String!
}

input TwoFactorTokenEmailTokenCompoundUniqueInput {
  email: String!
  token: String!
}

type TwoFactorTokenGroupBy {
  _count: TwoFactorTokenCountAggregate
  _max: TwoFactorTokenMaxAggregate
  _min: TwoFactorTokenMinAggregate
  email: String!
  expires: DateTimeISO!
  id: String!
  token: String!
}

type TwoFactorTokenMaxAggregate {
  email: String
  expires: DateTimeISO
  id: String
  token: String
}

input TwoFactorTokenMaxOrderByAggregateInput {
  email: SortOrder
  expires: SortOrder
  id: SortOrder
  token: SortOrder
}

type TwoFactorTokenMinAggregate {
  email: String
  expires: DateTimeISO
  id: String
  token: String
}

input TwoFactorTokenMinOrderByAggregateInput {
  email: SortOrder
  expires: SortOrder
  id: SortOrder
  token: SortOrder
}

input TwoFactorTokenOrderByWithAggregationInput {
  _count: TwoFactorTokenCountOrderByAggregateInput
  _max: TwoFactorTokenMaxOrderByAggregateInput
  _min: TwoFactorTokenMinOrderByAggregateInput
  email: SortOrder
  expires: SortOrder
  id: SortOrder
  token: SortOrder
}

input TwoFactorTokenOrderByWithRelationInput {
  email: SortOrder
  expires: SortOrder
  id: SortOrder
  token: SortOrder
}

enum TwoFactorTokenScalarFieldEnum {
  email
  expires
  id
  token
}

input TwoFactorTokenScalarWhereWithAggregatesInput {
  AND: [TwoFactorTokenScalarWhereWithAggregatesInput!]
  NOT: [TwoFactorTokenScalarWhereWithAggregatesInput!]
  OR: [TwoFactorTokenScalarWhereWithAggregatesInput!]
  email: StringWithAggregatesFilter
  expires: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  token: StringWithAggregatesFilter
}

input TwoFactorTokenUpdateInput {
  email: StringFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input TwoFactorTokenUpdateManyMutationInput {
  email: StringFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input TwoFactorTokenWhereInput {
  AND: [TwoFactorTokenWhereInput!]
  NOT: [TwoFactorTokenWhereInput!]
  OR: [TwoFactorTokenWhereInput!]
  email: StringFilter
  expires: DateTimeFilter
  id: StringFilter
  token: StringFilter
}

input TwoFactorTokenWhereUniqueInput {
  AND: [TwoFactorTokenWhereInput!]
  NOT: [TwoFactorTokenWhereInput!]
  OR: [TwoFactorTokenWhereInput!]
  email: StringFilter
  email_token: TwoFactorTokenEmailTokenCompoundUniqueInput
  expires: DateTimeFilter
  id: String
  token: String
}

type User {
  _count: UserCount
  accounts(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): [Account!]!
  createdAt: DateTimeISO!
  email: String!
  emailVerified: DateTimeISO
  id: String!
  image: String
  imageId: String
  isTwoFactorEnable: Boolean!
  name: String!
  password: String
  role: Role!
  status(cursor: StatusWhereUniqueInput, distinct: [StatusScalarFieldEnum!], orderBy: [StatusOrderByWithRelationInput!], skip: Int, take: Int, where: StatusWhereInput): [Status!]!
  twoFactorConfirnation(where: TwoFactorConfirnationWhereInput): TwoFactorConfirnation
  updatedAt: DateTimeISO!
  workspaces(cursor: WorkspaceWhereUniqueInput, distinct: [WorkspaceScalarFieldEnum!], orderBy: [WorkspaceOrderByWithRelationInput!], skip: Int, take: Int, where: WorkspaceWhereInput): [Workspace!]!
}

type UserCount {
  accounts(where: AccountWhereInput): Int!
  status(where: StatusWhereInput): Int!
  workspaces(where: WorkspaceWhereInput): Int!
}

type UserCountAggregate {
  _all: Int!
  createdAt: Int!
  email: Int!
  emailVerified: Int!
  id: Int!
  image: Int!
  imageId: Int!
  isTwoFactorEnable: Int!
  name: Int!
  password: Int!
  role: Int!
  updatedAt: Int!
}

input UserCountOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  imageId: SortOrder
  isTwoFactorEnable: SortOrder
  name: SortOrder
  password: SortOrder
  role: SortOrder
  updatedAt: SortOrder
}

input UserCreateInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  createdAt: DateTimeISO
  email: String!
  emailVerified: DateTimeISO
  id: String
  image: String
  imageId: String
  isTwoFactorEnable: Boolean
  name: String!
  password: String
  role: Role
  status: StatusCreateNestedManyWithoutUserInput
  twoFactorConfirnation: TwoFactorConfirnationCreateNestedOneWithoutUserInput
  updatedAt: DateTimeISO
  workspaces: WorkspaceCreateNestedManyWithoutUserInput
}

input UserCreateManyInput {
  createdAt: DateTimeISO
  email: String!
  emailVerified: DateTimeISO
  id: String
  image: String
  imageId: String
  isTwoFactorEnable: Boolean
  name: String!
  password: String
  role: Role
  updatedAt: DateTimeISO
}

input UserCreateNestedOneWithoutAccountsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  create: UserCreateWithoutAccountsInput
}

input UserCreateNestedOneWithoutStatusInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutStatusInput
  create: UserCreateWithoutStatusInput
}

input UserCreateNestedOneWithoutTwoFactorConfirnationInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTwoFactorConfirnationInput
  create: UserCreateWithoutTwoFactorConfirnationInput
}

input UserCreateNestedOneWithoutWorkspacesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutWorkspacesInput
  create: UserCreateWithoutWorkspacesInput
}

input UserCreateOrConnectWithoutAccountsInput {
  create: UserCreateWithoutAccountsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutStatusInput {
  create: UserCreateWithoutStatusInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTwoFactorConfirnationInput {
  create: UserCreateWithoutTwoFactorConfirnationInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutWorkspacesInput {
  create: UserCreateWithoutWorkspacesInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAccountsInput {
  createdAt: DateTimeISO
  email: String!
  emailVerified: DateTimeISO
  id: String
  image: String
  imageId: String
  isTwoFactorEnable: Boolean
  name: String!
  password: String
  role: Role
  status: StatusCreateNestedManyWithoutUserInput
  twoFactorConfirnation: TwoFactorConfirnationCreateNestedOneWithoutUserInput
  updatedAt: DateTimeISO
  workspaces: WorkspaceCreateNestedManyWithoutUserInput
}

input UserCreateWithoutStatusInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  createdAt: DateTimeISO
  email: String!
  emailVerified: DateTimeISO
  id: String
  image: String
  imageId: String
  isTwoFactorEnable: Boolean
  name: String!
  password: String
  role: Role
  twoFactorConfirnation: TwoFactorConfirnationCreateNestedOneWithoutUserInput
  updatedAt: DateTimeISO
  workspaces: WorkspaceCreateNestedManyWithoutUserInput
}

input UserCreateWithoutTwoFactorConfirnationInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  createdAt: DateTimeISO
  email: String!
  emailVerified: DateTimeISO
  id: String
  image: String
  imageId: String
  isTwoFactorEnable: Boolean
  name: String!
  password: String
  role: Role
  status: StatusCreateNestedManyWithoutUserInput
  updatedAt: DateTimeISO
  workspaces: WorkspaceCreateNestedManyWithoutUserInput
}

input UserCreateWithoutWorkspacesInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  createdAt: DateTimeISO
  email: String!
  emailVerified: DateTimeISO
  id: String
  image: String
  imageId: String
  isTwoFactorEnable: Boolean
  name: String!
  password: String
  role: Role
  status: StatusCreateNestedManyWithoutUserInput
  twoFactorConfirnation: TwoFactorConfirnationCreateNestedOneWithoutUserInput
  updatedAt: DateTimeISO
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  createdAt: DateTimeISO!
  email: String!
  emailVerified: DateTimeISO
  id: String!
  image: String
  imageId: String
  isTwoFactorEnable: Boolean!
  name: String!
  password: String
  role: Role!
  updatedAt: DateTimeISO!
}

type UserMaxAggregate {
  createdAt: DateTimeISO
  email: String
  emailVerified: DateTimeISO
  id: String
  image: String
  imageId: String
  isTwoFactorEnable: Boolean
  name: String
  password: String
  role: Role
  updatedAt: DateTimeISO
}

input UserMaxOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  imageId: SortOrder
  isTwoFactorEnable: SortOrder
  name: SortOrder
  password: SortOrder
  role: SortOrder
  updatedAt: SortOrder
}

type UserMinAggregate {
  createdAt: DateTimeISO
  email: String
  emailVerified: DateTimeISO
  id: String
  image: String
  imageId: String
  isTwoFactorEnable: Boolean
  name: String
  password: String
  role: Role
  updatedAt: DateTimeISO
}

input UserMinOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  imageId: SortOrder
  isTwoFactorEnable: SortOrder
  name: SortOrder
  password: SortOrder
  role: SortOrder
  updatedAt: SortOrder
}

input UserNullableRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrderInput
  id: SortOrder
  image: SortOrderInput
  imageId: SortOrderInput
  isTwoFactorEnable: SortOrder
  name: SortOrder
  password: SortOrderInput
  role: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithRelationInput {
  accounts: AccountOrderByRelationAggregateInput
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrderInput
  id: SortOrder
  image: SortOrderInput
  imageId: SortOrderInput
  isTwoFactorEnable: SortOrder
  name: SortOrder
  password: SortOrderInput
  role: SortOrder
  status: StatusOrderByRelationAggregateInput
  twoFactorConfirnation: TwoFactorConfirnationOrderByWithRelationInput
  updatedAt: SortOrder
  workspaces: WorkspaceOrderByRelationAggregateInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  createdAt
  email
  emailVerified
  id
  image
  imageId
  isTwoFactorEnable
  name
  password
  role
  updatedAt
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  emailVerified: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  image: StringNullableWithAggregatesFilter
  imageId: StringNullableWithAggregatesFilter
  isTwoFactorEnable: BoolWithAggregatesFilter
  name: StringWithAggregatesFilter
  password: StringNullableWithAggregatesFilter
  role: EnumRoleWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input UserUpdateInput {
  accounts: AccountUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  imageId: NullableStringFieldUpdateOperationsInput
  isTwoFactorEnable: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  status: StatusUpdateManyWithoutUserNestedInput
  twoFactorConfirnation: TwoFactorConfirnationUpdateOneWithoutUserNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  workspaces: WorkspaceUpdateManyWithoutUserNestedInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  imageId: NullableStringFieldUpdateOperationsInput
  isTwoFactorEnable: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutAccountsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  create: UserCreateWithoutAccountsInput
  update: UserUpdateToOneWithWhereWithoutAccountsInput
  upsert: UserUpsertWithoutAccountsInput
}

input UserUpdateOneRequiredWithoutStatusNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutStatusInput
  create: UserCreateWithoutStatusInput
  update: UserUpdateToOneWithWhereWithoutStatusInput
  upsert: UserUpsertWithoutStatusInput
}

input UserUpdateOneRequiredWithoutTwoFactorConfirnationNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTwoFactorConfirnationInput
  create: UserCreateWithoutTwoFactorConfirnationInput
  update: UserUpdateToOneWithWhereWithoutTwoFactorConfirnationInput
  upsert: UserUpsertWithoutTwoFactorConfirnationInput
}

input UserUpdateOneWithoutWorkspacesNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutWorkspacesInput
  create: UserCreateWithoutWorkspacesInput
  delete: UserWhereInput
  disconnect: UserWhereInput
  update: UserUpdateToOneWithWhereWithoutWorkspacesInput
  upsert: UserUpsertWithoutWorkspacesInput
}

input UserUpdateToOneWithWhereWithoutAccountsInput {
  data: UserUpdateWithoutAccountsInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutStatusInput {
  data: UserUpdateWithoutStatusInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutTwoFactorConfirnationInput {
  data: UserUpdateWithoutTwoFactorConfirnationInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutWorkspacesInput {
  data: UserUpdateWithoutWorkspacesInput!
  where: UserWhereInput
}

input UserUpdateWithoutAccountsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  imageId: NullableStringFieldUpdateOperationsInput
  isTwoFactorEnable: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  status: StatusUpdateManyWithoutUserNestedInput
  twoFactorConfirnation: TwoFactorConfirnationUpdateOneWithoutUserNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  workspaces: WorkspaceUpdateManyWithoutUserNestedInput
}

input UserUpdateWithoutStatusInput {
  accounts: AccountUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  imageId: NullableStringFieldUpdateOperationsInput
  isTwoFactorEnable: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  twoFactorConfirnation: TwoFactorConfirnationUpdateOneWithoutUserNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  workspaces: WorkspaceUpdateManyWithoutUserNestedInput
}

input UserUpdateWithoutTwoFactorConfirnationInput {
  accounts: AccountUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  imageId: NullableStringFieldUpdateOperationsInput
  isTwoFactorEnable: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  status: StatusUpdateManyWithoutUserNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  workspaces: WorkspaceUpdateManyWithoutUserNestedInput
}

input UserUpdateWithoutWorkspacesInput {
  accounts: AccountUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  imageId: NullableStringFieldUpdateOperationsInput
  isTwoFactorEnable: BoolFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: NullableStringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
  status: StatusUpdateManyWithoutUserNestedInput
  twoFactorConfirnation: TwoFactorConfirnationUpdateOneWithoutUserNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutAccountsInput {
  create: UserCreateWithoutAccountsInput!
  update: UserUpdateWithoutAccountsInput!
  where: UserWhereInput
}

input UserUpsertWithoutStatusInput {
  create: UserCreateWithoutStatusInput!
  update: UserUpdateWithoutStatusInput!
  where: UserWhereInput
}

input UserUpsertWithoutTwoFactorConfirnationInput {
  create: UserCreateWithoutTwoFactorConfirnationInput!
  update: UserUpdateWithoutTwoFactorConfirnationInput!
  where: UserWhereInput
}

input UserUpsertWithoutWorkspacesInput {
  create: UserCreateWithoutWorkspacesInput!
  update: UserUpdateWithoutWorkspacesInput!
  where: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  accounts: AccountListRelationFilter
  createdAt: DateTimeFilter
  email: StringFilter
  emailVerified: DateTimeNullableFilter
  id: StringFilter
  image: StringNullableFilter
  imageId: StringNullableFilter
  isTwoFactorEnable: BoolFilter
  name: StringFilter
  password: StringNullableFilter
  role: EnumRoleFilter
  status: StatusListRelationFilter
  twoFactorConfirnation: TwoFactorConfirnationNullableRelationFilter
  updatedAt: DateTimeFilter
  workspaces: WorkspaceListRelationFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  accounts: AccountListRelationFilter
  createdAt: DateTimeFilter
  email: String
  emailVerified: DateTimeNullableFilter
  id: String
  image: StringNullableFilter
  imageId: StringNullableFilter
  isTwoFactorEnable: BoolFilter
  name: StringFilter
  password: StringNullableFilter
  role: EnumRoleFilter
  status: StatusListRelationFilter
  twoFactorConfirnation: TwoFactorConfirnationNullableRelationFilter
  updatedAt: DateTimeFilter
  workspaces: WorkspaceListRelationFilter
}

type VerificationToken {
  email: String!
  expires: DateTimeISO!
  id: String!
  token: String!
}

type VerificationTokenCountAggregate {
  _all: Int!
  email: Int!
  expires: Int!
  id: Int!
  token: Int!
}

input VerificationTokenCountOrderByAggregateInput {
  email: SortOrder
  expires: SortOrder
  id: SortOrder
  token: SortOrder
}

input VerificationTokenCreateInput {
  email: String!
  expires: DateTimeISO!
  id: String
  token: String!
}

input VerificationTokenCreateManyInput {
  email: String!
  expires: DateTimeISO!
  id: String
  token: String!
}

input VerificationTokenEmailTokenCompoundUniqueInput {
  email: String!
  token: String!
}

type VerificationTokenGroupBy {
  _count: VerificationTokenCountAggregate
  _max: VerificationTokenMaxAggregate
  _min: VerificationTokenMinAggregate
  email: String!
  expires: DateTimeISO!
  id: String!
  token: String!
}

type VerificationTokenMaxAggregate {
  email: String
  expires: DateTimeISO
  id: String
  token: String
}

input VerificationTokenMaxOrderByAggregateInput {
  email: SortOrder
  expires: SortOrder
  id: SortOrder
  token: SortOrder
}

type VerificationTokenMinAggregate {
  email: String
  expires: DateTimeISO
  id: String
  token: String
}

input VerificationTokenMinOrderByAggregateInput {
  email: SortOrder
  expires: SortOrder
  id: SortOrder
  token: SortOrder
}

input VerificationTokenOrderByWithAggregationInput {
  _count: VerificationTokenCountOrderByAggregateInput
  _max: VerificationTokenMaxOrderByAggregateInput
  _min: VerificationTokenMinOrderByAggregateInput
  email: SortOrder
  expires: SortOrder
  id: SortOrder
  token: SortOrder
}

input VerificationTokenOrderByWithRelationInput {
  email: SortOrder
  expires: SortOrder
  id: SortOrder
  token: SortOrder
}

enum VerificationTokenScalarFieldEnum {
  email
  expires
  id
  token
}

input VerificationTokenScalarWhereWithAggregatesInput {
  AND: [VerificationTokenScalarWhereWithAggregatesInput!]
  NOT: [VerificationTokenScalarWhereWithAggregatesInput!]
  OR: [VerificationTokenScalarWhereWithAggregatesInput!]
  email: StringWithAggregatesFilter
  expires: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  token: StringWithAggregatesFilter
}

input VerificationTokenUpdateInput {
  email: StringFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input VerificationTokenUpdateManyMutationInput {
  email: StringFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input VerificationTokenWhereInput {
  AND: [VerificationTokenWhereInput!]
  NOT: [VerificationTokenWhereInput!]
  OR: [VerificationTokenWhereInput!]
  email: StringFilter
  expires: DateTimeFilter
  id: StringFilter
  token: StringFilter
}

input VerificationTokenWhereUniqueInput {
  AND: [VerificationTokenWhereInput!]
  NOT: [VerificationTokenWhereInput!]
  OR: [VerificationTokenWhereInput!]
  email: StringFilter
  email_token: VerificationTokenEmailTokenCompoundUniqueInput
  expires: DateTimeFilter
  id: String
  token: String
}

type Workspace {
  _count: WorkspaceCount
  createdAt: DateTimeISO!
  description: String
  id: String!
  name: String!
  task(cursor: TaskWhereUniqueInput, distinct: [TaskScalarFieldEnum!], orderBy: [TaskOrderByWithRelationInput!], skip: Int, take: Int, where: TaskWhereInput): [Task!]!
  updatedAt: DateTimeISO!
  user(where: UserWhereInput): User
  userId: String
}

type WorkspaceCount {
  task(where: TaskWhereInput): Int!
}

type WorkspaceCountAggregate {
  _all: Int!
  createdAt: Int!
  description: Int!
  id: Int!
  name: Int!
  updatedAt: Int!
  userId: Int!
}

input WorkspaceCountOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input WorkspaceCreateInput {
  createdAt: DateTimeISO
  description: String
  id: String
  name: String!
  task: TaskCreateNestedManyWithoutWorkspaceInput
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutWorkspacesInput
}

input WorkspaceCreateManyInput {
  createdAt: DateTimeISO
  description: String
  id: String
  name: String!
  updatedAt: DateTimeISO
  userId: String
}

input WorkspaceCreateManyUserInput {
  createdAt: DateTimeISO
  description: String
  id: String
  name: String!
  updatedAt: DateTimeISO
}

input WorkspaceCreateManyUserInputEnvelope {
  data: [WorkspaceCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input WorkspaceCreateNestedManyWithoutUserInput {
  connect: [WorkspaceWhereUniqueInput!]
  connectOrCreate: [WorkspaceCreateOrConnectWithoutUserInput!]
  create: [WorkspaceCreateWithoutUserInput!]
  createMany: WorkspaceCreateManyUserInputEnvelope
}

input WorkspaceCreateNestedOneWithoutTaskInput {
  connect: WorkspaceWhereUniqueInput
  connectOrCreate: WorkspaceCreateOrConnectWithoutTaskInput
  create: WorkspaceCreateWithoutTaskInput
}

input WorkspaceCreateOrConnectWithoutTaskInput {
  create: WorkspaceCreateWithoutTaskInput!
  where: WorkspaceWhereUniqueInput!
}

input WorkspaceCreateOrConnectWithoutUserInput {
  create: WorkspaceCreateWithoutUserInput!
  where: WorkspaceWhereUniqueInput!
}

input WorkspaceCreateWithoutTaskInput {
  createdAt: DateTimeISO
  description: String
  id: String
  name: String!
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutWorkspacesInput
}

input WorkspaceCreateWithoutUserInput {
  createdAt: DateTimeISO
  description: String
  id: String
  name: String!
  task: TaskCreateNestedManyWithoutWorkspaceInput
  updatedAt: DateTimeISO
}

type WorkspaceGroupBy {
  _count: WorkspaceCountAggregate
  _max: WorkspaceMaxAggregate
  _min: WorkspaceMinAggregate
  createdAt: DateTimeISO!
  description: String
  id: String!
  name: String!
  updatedAt: DateTimeISO!
  userId: String
}

input WorkspaceListRelationFilter {
  every: WorkspaceWhereInput
  none: WorkspaceWhereInput
  some: WorkspaceWhereInput
}

type WorkspaceMaxAggregate {
  createdAt: DateTimeISO
  description: String
  id: String
  name: String
  updatedAt: DateTimeISO
  userId: String
}

input WorkspaceMaxOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type WorkspaceMinAggregate {
  createdAt: DateTimeISO
  description: String
  id: String
  name: String
  updatedAt: DateTimeISO
  userId: String
}

input WorkspaceMinOrderByAggregateInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input WorkspaceNullableRelationFilter {
  is: WorkspaceWhereInput
  isNot: WorkspaceWhereInput
}

input WorkspaceOrderByRelationAggregateInput {
  _count: SortOrder
}

input WorkspaceOrderByWithAggregationInput {
  _count: WorkspaceCountOrderByAggregateInput
  _max: WorkspaceMaxOrderByAggregateInput
  _min: WorkspaceMinOrderByAggregateInput
  createdAt: SortOrder
  description: SortOrderInput
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  userId: SortOrderInput
}

input WorkspaceOrderByWithRelationInput {
  createdAt: SortOrder
  description: SortOrderInput
  id: SortOrder
  name: SortOrder
  task: TaskOrderByRelationAggregateInput
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrderInput
}

enum WorkspaceScalarFieldEnum {
  createdAt
  description
  id
  name
  updatedAt
  userId
}

input WorkspaceScalarWhereInput {
  AND: [WorkspaceScalarWhereInput!]
  NOT: [WorkspaceScalarWhereInput!]
  OR: [WorkspaceScalarWhereInput!]
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  userId: StringNullableFilter
}

input WorkspaceScalarWhereWithAggregatesInput {
  AND: [WorkspaceScalarWhereWithAggregatesInput!]
  NOT: [WorkspaceScalarWhereWithAggregatesInput!]
  OR: [WorkspaceScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringNullableWithAggregatesFilter
}

input WorkspaceUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  task: TaskUpdateManyWithoutWorkspaceNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneWithoutWorkspacesNestedInput
}

input WorkspaceUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input WorkspaceUpdateManyWithWhereWithoutUserInput {
  data: WorkspaceUpdateManyMutationInput!
  where: WorkspaceScalarWhereInput!
}

input WorkspaceUpdateManyWithoutUserNestedInput {
  connect: [WorkspaceWhereUniqueInput!]
  connectOrCreate: [WorkspaceCreateOrConnectWithoutUserInput!]
  create: [WorkspaceCreateWithoutUserInput!]
  createMany: WorkspaceCreateManyUserInputEnvelope
  delete: [WorkspaceWhereUniqueInput!]
  deleteMany: [WorkspaceScalarWhereInput!]
  disconnect: [WorkspaceWhereUniqueInput!]
  set: [WorkspaceWhereUniqueInput!]
  update: [WorkspaceUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [WorkspaceUpdateManyWithWhereWithoutUserInput!]
  upsert: [WorkspaceUpsertWithWhereUniqueWithoutUserInput!]
}

input WorkspaceUpdateOneWithoutTaskNestedInput {
  connect: WorkspaceWhereUniqueInput
  connectOrCreate: WorkspaceCreateOrConnectWithoutTaskInput
  create: WorkspaceCreateWithoutTaskInput
  delete: WorkspaceWhereInput
  disconnect: WorkspaceWhereInput
  update: WorkspaceUpdateToOneWithWhereWithoutTaskInput
  upsert: WorkspaceUpsertWithoutTaskInput
}

input WorkspaceUpdateToOneWithWhereWithoutTaskInput {
  data: WorkspaceUpdateWithoutTaskInput!
  where: WorkspaceWhereInput
}

input WorkspaceUpdateWithWhereUniqueWithoutUserInput {
  data: WorkspaceUpdateWithoutUserInput!
  where: WorkspaceWhereUniqueInput!
}

input WorkspaceUpdateWithoutTaskInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneWithoutWorkspacesNestedInput
}

input WorkspaceUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  task: TaskUpdateManyWithoutWorkspaceNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input WorkspaceUpsertWithWhereUniqueWithoutUserInput {
  create: WorkspaceCreateWithoutUserInput!
  update: WorkspaceUpdateWithoutUserInput!
  where: WorkspaceWhereUniqueInput!
}

input WorkspaceUpsertWithoutTaskInput {
  create: WorkspaceCreateWithoutTaskInput!
  update: WorkspaceUpdateWithoutTaskInput!
  where: WorkspaceWhereInput
}

input WorkspaceWhereInput {
  AND: [WorkspaceWhereInput!]
  NOT: [WorkspaceWhereInput!]
  OR: [WorkspaceWhereInput!]
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  name: StringFilter
  task: TaskListRelationFilter
  updatedAt: DateTimeFilter
  user: UserNullableRelationFilter
  userId: StringNullableFilter
}

input WorkspaceWhereUniqueInput {
  AND: [WorkspaceWhereInput!]
  NOT: [WorkspaceWhereInput!]
  OR: [WorkspaceWhereInput!]
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: String
  name: StringFilter
  task: TaskListRelationFilter
  updatedAt: DateTimeFilter
  user: UserNullableRelationFilter
  userId: StringNullableFilter
}