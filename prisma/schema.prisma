generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider            = "typegraphql-prisma"
  output              = "../prisma/generated/type-graphql"
  emitTranspiledCode  = "true"
  formatGeneratedCode = "false"
}

datasource postgres {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                      String    @id @default(cuid())
  name                    String
  email                   String    @unique
  emailVerified           DateTime?
  password                String?
  role                    Role      @default(USER)
  image                   String?
  imageId                 String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  isTwoFactorEnable       Boolean @default(false)

  twoFactorConfirnation   TwoFactorConfirnation?
  accounts                Account[]
  workspaces              Workspace[]

  status Status[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
 
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model VerificationToken {
  id            String    @id @default(cuid())
  email         String    
  token         String    @unique
  expires       DateTime
  
  @@unique([email, token])
}

model PasswordResetToken {
  id            String    @id @default(cuid())
  email         String    
  token         String    @unique
  expires       DateTime
  
  @@unique([email, token])
}

model TwoFactorToken {
  id            String    @id @default(cuid())
  email         String    
  token         String    @unique
  expires       DateTime
  
  @@unique([email, token])
}

model TwoFactorConfirnation {
  id            String    @id @default(cuid())

  userId        String
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Workspace {
  id            String    @id @default(cuid())
  name          String
  description   String?   
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  task          Task[] 

  user    User?    @relation(fields: [userId], references: [id])
  userId  String?
} 

model File {
  id  Int @id @default(autoincrement())
  url String
  fileId String @unique
  name String

  task Task? @relation(fields: [taskId], references: [id])
  taskId  String?
}

model Task  {
  id            String    @id @default(cuid())
  name String
  message String? 
  note String?
  dueDate DateTime?  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  status Status?  @relation("TaskStatus", fields: [statusId], references: [id])
  statusId String?

  priority Status?  @relation("TaskPriority", fields: [priorityId], references: [id])
  priorityId String?
  
  workspace Workspace? @relation(fields: [workspaceId], references: [id])
  workspaceId String

  files File[]
}

model Status {
  id    String    @id @default(cuid())
  name  String?
  color String
  type  StatusType @default(STATUS)

  user  User   @relation(fields: [userId], references: [id])
  userId String

  priorityTasks Task[] @relation("TaskPriority")
  statusTasks Task[] @relation("TaskStatus")
}

enum StatusType {
  STATUS 
  PRIORITY
}

enum Role {
  ADMIN
  MEMBER
  USER
}
