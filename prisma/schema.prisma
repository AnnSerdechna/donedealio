generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider            = "typegraphql-prisma"
  output              = "../prisma/generated/type-graphql"
  emitTranspiledCode  = "true"
  formatGeneratedCode = "false"
}

datasource postgres {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  firstName     String
  lastName      String   
  password      String
  role          Role      @default(ADMIN)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  workspaces    Workspace[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  user               User    @relation(fields: [userId], references: [id])
  provider           String
  providerAccountId  String
  type               String
  access_token       String?
  expires_at         Int?
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
}

model Workspace {
  id            String    @id @default(cuid())
  name          String
  description   String   
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  task Task[] 

  user    User?    @relation(fields: [userId], references: [id])
  userId  String?
} 

model File {
  id  Int @id @default(autoincrement())
  file String

  task Task? @relation(fields: [taskId], references: [id])
  taskId  String?
}

model Task  {
  id            String    @id @default(cuid())
  name String
  message String? 
  note String?
  dueDate DateTime?  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  status Status?  @relation(fields: [statusid], references: [id])
  statusid Int?

  priority Priority?  @relation(fields: [priorityId], references: [id])
  priorityId Int?

  files File[]

  workspace Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
}

model Status {
  id  Int @id @default(autoincrement())
  name String @unique
  color String
  task Task[]
}

model Priority {
  id  Int @id @default(autoincrement())
  name String @unique
  color String
  task Task[]
}

enum Role {
  ADMIN
  MEMBER
  USER
}
