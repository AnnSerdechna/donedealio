schema {
  query: Query
  mutation: Mutation
}

type Account {
  accessToken: String
  accessTokenExpires: DateTimeISO
  createdAt: DateTimeISO!
  id: String!
  providerAccountId: String!
  providerId: String!
  providerType: String!
  refreshToken: String
  updatedAt: DateTimeISO!
  user: User!
  userId: String!
}

type AccountCountAggregate {
  _all: Int!
  accessToken: Int!
  accessTokenExpires: Int!
  createdAt: Int!
  id: Int!
  providerAccountId: Int!
  providerId: Int!
  providerType: Int!
  refreshToken: Int!
  updatedAt: Int!
  userId: Int!
}

input AccountCountOrderByAggregateInput {
  accessToken: SortOrder
  accessTokenExpires: SortOrder
  createdAt: SortOrder
  id: SortOrder
  providerAccountId: SortOrder
  providerId: SortOrder
  providerType: SortOrder
  refreshToken: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input AccountCreateInput {
  accessToken: String
  accessTokenExpires: DateTimeISO
  createdAt: DateTimeISO
  id: String
  providerAccountId: String!
  providerId: String!
  providerType: String!
  refreshToken: String
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutAccountsInput!
}

input AccountCreateManyInput {
  accessToken: String
  accessTokenExpires: DateTimeISO
  createdAt: DateTimeISO
  id: String
  providerAccountId: String!
  providerId: String!
  providerType: String!
  refreshToken: String
  updatedAt: DateTimeISO
  userId: String!
}

input AccountCreateManyUserInput {
  accessToken: String
  accessTokenExpires: DateTimeISO
  createdAt: DateTimeISO
  id: String
  providerAccountId: String!
  providerId: String!
  providerType: String!
  refreshToken: String
  updatedAt: DateTimeISO
}

input AccountCreateManyUserInputEnvelope {
  data: [AccountCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input AccountCreateNestedManyWithoutUserInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
  create: [AccountCreateWithoutUserInput!]
  createMany: AccountCreateManyUserInputEnvelope
}

input AccountCreateOrConnectWithoutUserInput {
  create: AccountCreateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateWithoutUserInput {
  accessToken: String
  accessTokenExpires: DateTimeISO
  createdAt: DateTimeISO
  id: String
  providerAccountId: String!
  providerId: String!
  providerType: String!
  refreshToken: String
  updatedAt: DateTimeISO
}

type AccountGroupBy {
  _count: AccountCountAggregate
  _max: AccountMaxAggregate
  _min: AccountMinAggregate
  accessToken: String
  accessTokenExpires: DateTimeISO
  createdAt: DateTimeISO!
  id: String!
  providerAccountId: String!
  providerId: String!
  providerType: String!
  refreshToken: String
  updatedAt: DateTimeISO!
  userId: String!
}

input AccountListRelationFilter {
  every: AccountWhereInput
  none: AccountWhereInput
  some: AccountWhereInput
}

type AccountMaxAggregate {
  accessToken: String
  accessTokenExpires: DateTimeISO
  createdAt: DateTimeISO
  id: String
  providerAccountId: String
  providerId: String
  providerType: String
  refreshToken: String
  updatedAt: DateTimeISO
  userId: String
}

input AccountMaxOrderByAggregateInput {
  accessToken: SortOrder
  accessTokenExpires: SortOrder
  createdAt: SortOrder
  id: SortOrder
  providerAccountId: SortOrder
  providerId: SortOrder
  providerType: SortOrder
  refreshToken: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type AccountMinAggregate {
  accessToken: String
  accessTokenExpires: DateTimeISO
  createdAt: DateTimeISO
  id: String
  providerAccountId: String
  providerId: String
  providerType: String
  refreshToken: String
  updatedAt: DateTimeISO
  userId: String
}

input AccountMinOrderByAggregateInput {
  accessToken: SortOrder
  accessTokenExpires: SortOrder
  createdAt: SortOrder
  id: SortOrder
  providerAccountId: SortOrder
  providerId: SortOrder
  providerType: SortOrder
  refreshToken: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input AccountOrderByRelationAggregateInput {
  _count: SortOrder
}

input AccountOrderByWithAggregationInput {
  _count: AccountCountOrderByAggregateInput
  _max: AccountMaxOrderByAggregateInput
  _min: AccountMinOrderByAggregateInput
  accessToken: SortOrderInput
  accessTokenExpires: SortOrderInput
  createdAt: SortOrder
  id: SortOrder
  providerAccountId: SortOrder
  providerId: SortOrder
  providerType: SortOrder
  refreshToken: SortOrderInput
  updatedAt: SortOrder
  userId: SortOrder
}

input AccountOrderByWithRelationInput {
  accessToken: SortOrderInput
  accessTokenExpires: SortOrderInput
  createdAt: SortOrder
  id: SortOrder
  providerAccountId: SortOrder
  providerId: SortOrder
  providerType: SortOrder
  refreshToken: SortOrderInput
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input AccountProviderIdProviderAccountIdCompoundUniqueInput {
  providerAccountId: String!
  providerId: String!
}

enum AccountScalarFieldEnum {
  accessToken
  accessTokenExpires
  createdAt
  id
  providerAccountId
  providerId
  providerType
  refreshToken
  updatedAt
  userId
}

input AccountScalarWhereInput {
  AND: [AccountScalarWhereInput!]
  NOT: [AccountScalarWhereInput!]
  OR: [AccountScalarWhereInput!]
  accessToken: StringNullableFilter
  accessTokenExpires: DateTimeNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  providerAccountId: StringFilter
  providerId: StringFilter
  providerType: StringFilter
  refreshToken: StringNullableFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input AccountScalarWhereWithAggregatesInput {
  AND: [AccountScalarWhereWithAggregatesInput!]
  NOT: [AccountScalarWhereWithAggregatesInput!]
  OR: [AccountScalarWhereWithAggregatesInput!]
  accessToken: StringNullableWithAggregatesFilter
  accessTokenExpires: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  providerAccountId: StringWithAggregatesFilter
  providerId: StringWithAggregatesFilter
  providerType: StringWithAggregatesFilter
  refreshToken: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input AccountUpdateInput {
  accessToken: NullableStringFieldUpdateOperationsInput
  accessTokenExpires: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  providerId: StringFieldUpdateOperationsInput
  providerType: StringFieldUpdateOperationsInput
  refreshToken: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAccountsNestedInput
}

input AccountUpdateManyMutationInput {
  accessToken: NullableStringFieldUpdateOperationsInput
  accessTokenExpires: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  providerId: StringFieldUpdateOperationsInput
  providerType: StringFieldUpdateOperationsInput
  refreshToken: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AccountUpdateManyWithWhereWithoutUserInput {
  data: AccountUpdateManyMutationInput!
  where: AccountScalarWhereInput!
}

input AccountUpdateManyWithoutUserNestedInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
  create: [AccountCreateWithoutUserInput!]
  createMany: AccountCreateManyUserInputEnvelope
  delete: [AccountWhereUniqueInput!]
  deleteMany: [AccountScalarWhereInput!]
  disconnect: [AccountWhereUniqueInput!]
  set: [AccountWhereUniqueInput!]
  update: [AccountUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AccountUpdateManyWithWhereWithoutUserInput!]
  upsert: [AccountUpsertWithWhereUniqueWithoutUserInput!]
}

input AccountUpdateWithWhereUniqueWithoutUserInput {
  data: AccountUpdateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountUpdateWithoutUserInput {
  accessToken: NullableStringFieldUpdateOperationsInput
  accessTokenExpires: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  providerId: StringFieldUpdateOperationsInput
  providerType: StringFieldUpdateOperationsInput
  refreshToken: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input AccountUpsertWithWhereUniqueWithoutUserInput {
  create: AccountCreateWithoutUserInput!
  update: AccountUpdateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  accessToken: StringNullableFilter
  accessTokenExpires: DateTimeNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  providerAccountId: StringFilter
  providerId: StringFilter
  providerType: StringFilter
  refreshToken: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input AccountWhereUniqueInput {
  AND: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  accessToken: StringNullableFilter
  accessTokenExpires: DateTimeNullableFilter
  createdAt: DateTimeFilter
  id: String
  providerAccountId: StringFilter
  providerId: StringFilter
  providerId_providerAccountId: AccountProviderIdProviderAccountIdCompoundUniqueInput
  providerType: StringFilter
  refreshToken: StringNullableFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

type AffectedRowsOutput {
  count: Int!
}

type AggregateAccount {
  _count: AccountCountAggregate
  _max: AccountMaxAggregate
  _min: AccountMinAggregate
}

type AggregateSession {
  _count: SessionCountAggregate
  _max: SessionMaxAggregate
  _min: SessionMinAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

type AggregateVerificationRequest {
  _count: VerificationRequestCountAggregate
  _max: VerificationRequestMaxAggregate
  _min: VerificationRequestMinAggregate
}

type CreateManyAndReturnAccount {
  accessToken: String
  accessTokenExpires: DateTimeISO
  createdAt: DateTimeISO!
  id: String!
  providerAccountId: String!
  providerId: String!
  providerType: String!
  refreshToken: String
  updatedAt: DateTimeISO!
  user: User!
  userId: String!
}

type CreateManyAndReturnSession {
  accessToken: String!
  createdAt: DateTimeISO!
  expires: DateTimeISO!
  id: String!
  sessionToken: String!
  updatedAt: DateTimeISO!
  user: User!
  userId: String!
}

type CreateManyAndReturnUser {
  createdAt: DateTimeISO!
  email: String
  emailVerified: DateTimeISO
  id: String!
  image: String
  name: String
  updatedAt: DateTimeISO!
}

type CreateManyAndReturnVerificationRequest {
  createdAt: DateTimeISO!
  expires: DateTimeISO!
  id: String!
  identifier: String!
  token: String!
  updatedAt: DateTimeISO!
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTimeISO
}

input DateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input DateTimeNullableFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableFilter
  notIn: [DateTimeISO!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

type Mutation {
  createManyAccount(data: [AccountCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyAndReturnAccount(data: [AccountCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnAccount!]!
  createManyAndReturnSession(data: [SessionCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnSession!]!
  createManyAndReturnUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnUser!]!
  createManyAndReturnVerificationRequest(data: [VerificationRequestCreateManyInput!]!, skipDuplicates: Boolean): [CreateManyAndReturnVerificationRequest!]!
  createManySession(data: [SessionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyVerificationRequest(data: [VerificationRequestCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneAccount(data: AccountCreateInput!): Account!
  createOneSession(data: SessionCreateInput!): Session!
  createOneUser(data: UserCreateInput!): User!
  createOneVerificationRequest(data: VerificationRequestCreateInput!): VerificationRequest!
  deleteManyAccount(where: AccountWhereInput): AffectedRowsOutput!
  deleteManySession(where: SessionWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteManyVerificationRequest(where: VerificationRequestWhereInput): AffectedRowsOutput!
  deleteOneAccount(where: AccountWhereUniqueInput!): Account
  deleteOneSession(where: SessionWhereUniqueInput!): Session
  deleteOneUser(where: UserWhereUniqueInput!): User
  deleteOneVerificationRequest(where: VerificationRequestWhereUniqueInput!): VerificationRequest
  updateManyAccount(data: AccountUpdateManyMutationInput!, where: AccountWhereInput): AffectedRowsOutput!
  updateManySession(data: SessionUpdateManyMutationInput!, where: SessionWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateManyVerificationRequest(data: VerificationRequestUpdateManyMutationInput!, where: VerificationRequestWhereInput): AffectedRowsOutput!
  updateOneAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
  updateOneSession(data: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateOneVerificationRequest(data: VerificationRequestUpdateInput!, where: VerificationRequestWhereUniqueInput!): VerificationRequest
  upsertOneAccount(create: AccountCreateInput!, update: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account!
  upsertOneSession(create: SessionCreateInput!, update: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertOneVerificationRequest(create: VerificationRequestCreateInput!, update: VerificationRequestUpdateInput!, where: VerificationRequestWhereUniqueInput!): VerificationRequest!
}

input NestedDateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeNullableFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTimeISO
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

enum NullsOrder {
  first
  last
}

type Query {
  account(where: AccountWhereUniqueInput!): Account
  accounts(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): [Account!]!
  aggregateAccount(cursor: AccountWhereUniqueInput, orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): AggregateAccount!
  aggregateSession(cursor: SessionWhereUniqueInput, orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): AggregateSession!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  aggregateVerificationRequest(cursor: VerificationRequestWhereUniqueInput, orderBy: [VerificationRequestOrderByWithRelationInput!], skip: Int, take: Int, where: VerificationRequestWhereInput): AggregateVerificationRequest!
  findFirstAccount(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): Account
  findFirstAccountOrThrow(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): Account
  findFirstSession(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): Session
  findFirstSessionOrThrow(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): Session
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstUserOrThrow(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstVerificationRequest(cursor: VerificationRequestWhereUniqueInput, distinct: [VerificationRequestScalarFieldEnum!], orderBy: [VerificationRequestOrderByWithRelationInput!], skip: Int, take: Int, where: VerificationRequestWhereInput): VerificationRequest
  findFirstVerificationRequestOrThrow(cursor: VerificationRequestWhereUniqueInput, distinct: [VerificationRequestScalarFieldEnum!], orderBy: [VerificationRequestOrderByWithRelationInput!], skip: Int, take: Int, where: VerificationRequestWhereInput): VerificationRequest
  getAccount(where: AccountWhereUniqueInput!): Account
  getSession(where: SessionWhereUniqueInput!): Session
  getUser(where: UserWhereUniqueInput!): User
  getVerificationRequest(where: VerificationRequestWhereUniqueInput!): VerificationRequest
  groupByAccount(by: [AccountScalarFieldEnum!]!, having: AccountScalarWhereWithAggregatesInput, orderBy: [AccountOrderByWithAggregationInput!], skip: Int, take: Int, where: AccountWhereInput): [AccountGroupBy!]!
  groupBySession(by: [SessionScalarFieldEnum!]!, having: SessionScalarWhereWithAggregatesInput, orderBy: [SessionOrderByWithAggregationInput!], skip: Int, take: Int, where: SessionWhereInput): [SessionGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  groupByVerificationRequest(by: [VerificationRequestScalarFieldEnum!]!, having: VerificationRequestScalarWhereWithAggregatesInput, orderBy: [VerificationRequestOrderByWithAggregationInput!], skip: Int, take: Int, where: VerificationRequestWhereInput): [VerificationRequestGroupBy!]!
  session(where: SessionWhereUniqueInput!): Session
  sessions(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): [Session!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  verificationRequest(where: VerificationRequestWhereUniqueInput!): VerificationRequest
  verificationRequests(cursor: VerificationRequestWhereUniqueInput, distinct: [VerificationRequestScalarFieldEnum!], orderBy: [VerificationRequestOrderByWithRelationInput!], skip: Int, take: Int, where: VerificationRequestWhereInput): [VerificationRequest!]!
}

enum QueryMode {
  default
  insensitive
}

type Session {
  accessToken: String!
  createdAt: DateTimeISO!
  expires: DateTimeISO!
  id: String!
  sessionToken: String!
  updatedAt: DateTimeISO!
  user: User!
  userId: String!
}

type SessionCountAggregate {
  _all: Int!
  accessToken: Int!
  createdAt: Int!
  expires: Int!
  id: Int!
  sessionToken: Int!
  updatedAt: Int!
  userId: Int!
}

input SessionCountOrderByAggregateInput {
  accessToken: SortOrder
  createdAt: SortOrder
  expires: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input SessionCreateInput {
  accessToken: String!
  createdAt: DateTimeISO
  expires: DateTimeISO!
  id: String
  sessionToken: String!
  updatedAt: DateTimeISO
  user: UserCreateNestedOneWithoutSessionsInput!
}

input SessionCreateManyInput {
  accessToken: String!
  createdAt: DateTimeISO
  expires: DateTimeISO!
  id: String
  sessionToken: String!
  updatedAt: DateTimeISO
  userId: String!
}

input SessionCreateManyUserInput {
  accessToken: String!
  createdAt: DateTimeISO
  expires: DateTimeISO!
  id: String
  sessionToken: String!
  updatedAt: DateTimeISO
}

input SessionCreateManyUserInputEnvelope {
  data: [SessionCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input SessionCreateNestedManyWithoutUserInput {
  connect: [SessionWhereUniqueInput!]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput!]
  create: [SessionCreateWithoutUserInput!]
  createMany: SessionCreateManyUserInputEnvelope
}

input SessionCreateOrConnectWithoutUserInput {
  create: SessionCreateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionCreateWithoutUserInput {
  accessToken: String!
  createdAt: DateTimeISO
  expires: DateTimeISO!
  id: String
  sessionToken: String!
  updatedAt: DateTimeISO
}

type SessionGroupBy {
  _count: SessionCountAggregate
  _max: SessionMaxAggregate
  _min: SessionMinAggregate
  accessToken: String!
  createdAt: DateTimeISO!
  expires: DateTimeISO!
  id: String!
  sessionToken: String!
  updatedAt: DateTimeISO!
  userId: String!
}

input SessionListRelationFilter {
  every: SessionWhereInput
  none: SessionWhereInput
  some: SessionWhereInput
}

type SessionMaxAggregate {
  accessToken: String
  createdAt: DateTimeISO
  expires: DateTimeISO
  id: String
  sessionToken: String
  updatedAt: DateTimeISO
  userId: String
}

input SessionMaxOrderByAggregateInput {
  accessToken: SortOrder
  createdAt: SortOrder
  expires: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type SessionMinAggregate {
  accessToken: String
  createdAt: DateTimeISO
  expires: DateTimeISO
  id: String
  sessionToken: String
  updatedAt: DateTimeISO
  userId: String
}

input SessionMinOrderByAggregateInput {
  accessToken: SortOrder
  createdAt: SortOrder
  expires: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input SessionOrderByRelationAggregateInput {
  _count: SortOrder
}

input SessionOrderByWithAggregationInput {
  _count: SessionCountOrderByAggregateInput
  _max: SessionMaxOrderByAggregateInput
  _min: SessionMinOrderByAggregateInput
  accessToken: SortOrder
  createdAt: SortOrder
  expires: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input SessionOrderByWithRelationInput {
  accessToken: SortOrder
  createdAt: SortOrder
  expires: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum SessionScalarFieldEnum {
  accessToken
  createdAt
  expires
  id
  sessionToken
  updatedAt
  userId
}

input SessionScalarWhereInput {
  AND: [SessionScalarWhereInput!]
  NOT: [SessionScalarWhereInput!]
  OR: [SessionScalarWhereInput!]
  accessToken: StringFilter
  createdAt: DateTimeFilter
  expires: DateTimeFilter
  id: StringFilter
  sessionToken: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input SessionScalarWhereWithAggregatesInput {
  AND: [SessionScalarWhereWithAggregatesInput!]
  NOT: [SessionScalarWhereWithAggregatesInput!]
  OR: [SessionScalarWhereWithAggregatesInput!]
  accessToken: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  expires: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  sessionToken: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input SessionUpdateInput {
  accessToken: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutSessionsNestedInput
}

input SessionUpdateManyMutationInput {
  accessToken: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SessionUpdateManyWithWhereWithoutUserInput {
  data: SessionUpdateManyMutationInput!
  where: SessionScalarWhereInput!
}

input SessionUpdateManyWithoutUserNestedInput {
  connect: [SessionWhereUniqueInput!]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput!]
  create: [SessionCreateWithoutUserInput!]
  createMany: SessionCreateManyUserInputEnvelope
  delete: [SessionWhereUniqueInput!]
  deleteMany: [SessionScalarWhereInput!]
  disconnect: [SessionWhereUniqueInput!]
  set: [SessionWhereUniqueInput!]
  update: [SessionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [SessionUpdateManyWithWhereWithoutUserInput!]
  upsert: [SessionUpsertWithWhereUniqueWithoutUserInput!]
}

input SessionUpdateWithWhereUniqueWithoutUserInput {
  data: SessionUpdateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionUpdateWithoutUserInput {
  accessToken: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SessionUpsertWithWhereUniqueWithoutUserInput {
  create: SessionCreateWithoutUserInput!
  update: SessionUpdateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionWhereInput {
  AND: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  accessToken: StringFilter
  createdAt: DateTimeFilter
  expires: DateTimeFilter
  id: StringFilter
  sessionToken: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input SessionWhereUniqueInput {
  AND: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  accessToken: String
  createdAt: DateTimeFilter
  expires: DateTimeFilter
  id: String
  sessionToken: String
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

type User {
  _count: UserCount
  accounts(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): [Account!]!
  createdAt: DateTimeISO!
  email: String
  emailVerified: DateTimeISO
  id: String!
  image: String
  name: String
  sessions(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): [Session!]!
  updatedAt: DateTimeISO!
}

type UserCount {
  accounts(where: AccountWhereInput): Int!
  sessions(where: SessionWhereInput): Int!
}

type UserCountAggregate {
  _all: Int!
  createdAt: Int!
  email: Int!
  emailVerified: Int!
  id: Int!
  image: Int!
  name: Int!
  updatedAt: Int!
}

input UserCountOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input UserCreateInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  createdAt: DateTimeISO
  email: String
  emailVerified: DateTimeISO
  id: String
  image: String
  name: String
  sessions: SessionCreateNestedManyWithoutUserInput
  updatedAt: DateTimeISO
}

input UserCreateManyInput {
  createdAt: DateTimeISO
  email: String
  emailVerified: DateTimeISO
  id: String
  image: String
  name: String
  updatedAt: DateTimeISO
}

input UserCreateNestedOneWithoutAccountsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  create: UserCreateWithoutAccountsInput
}

input UserCreateNestedOneWithoutSessionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSessionsInput
  create: UserCreateWithoutSessionsInput
}

input UserCreateOrConnectWithoutAccountsInput {
  create: UserCreateWithoutAccountsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutSessionsInput {
  create: UserCreateWithoutSessionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAccountsInput {
  createdAt: DateTimeISO
  email: String
  emailVerified: DateTimeISO
  id: String
  image: String
  name: String
  sessions: SessionCreateNestedManyWithoutUserInput
  updatedAt: DateTimeISO
}

input UserCreateWithoutSessionsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  createdAt: DateTimeISO
  email: String
  emailVerified: DateTimeISO
  id: String
  image: String
  name: String
  updatedAt: DateTimeISO
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  createdAt: DateTimeISO!
  email: String
  emailVerified: DateTimeISO
  id: String!
  image: String
  name: String
  updatedAt: DateTimeISO!
}

type UserMaxAggregate {
  createdAt: DateTimeISO
  email: String
  emailVerified: DateTimeISO
  id: String
  image: String
  name: String
  updatedAt: DateTimeISO
}

input UserMaxOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type UserMinAggregate {
  createdAt: DateTimeISO
  email: String
  emailVerified: DateTimeISO
  id: String
  image: String
  name: String
  updatedAt: DateTimeISO
}

input UserMinOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  createdAt: SortOrder
  email: SortOrderInput
  emailVerified: SortOrderInput
  id: SortOrder
  image: SortOrderInput
  name: SortOrderInput
  updatedAt: SortOrder
}

input UserOrderByWithRelationInput {
  accounts: AccountOrderByRelationAggregateInput
  createdAt: SortOrder
  email: SortOrderInput
  emailVerified: SortOrderInput
  id: SortOrder
  image: SortOrderInput
  name: SortOrderInput
  sessions: SessionOrderByRelationAggregateInput
  updatedAt: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  createdAt
  email
  emailVerified
  id
  image
  name
  updatedAt
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  email: StringNullableWithAggregatesFilter
  emailVerified: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  image: StringNullableWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input UserUpdateInput {
  accounts: AccountUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  sessions: SessionUpdateManyWithoutUserNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutAccountsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  create: UserCreateWithoutAccountsInput
  update: UserUpdateToOneWithWhereWithoutAccountsInput
  upsert: UserUpsertWithoutAccountsInput
}

input UserUpdateOneRequiredWithoutSessionsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSessionsInput
  create: UserCreateWithoutSessionsInput
  update: UserUpdateToOneWithWhereWithoutSessionsInput
  upsert: UserUpsertWithoutSessionsInput
}

input UserUpdateToOneWithWhereWithoutAccountsInput {
  data: UserUpdateWithoutAccountsInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutSessionsInput {
  data: UserUpdateWithoutSessionsInput!
  where: UserWhereInput
}

input UserUpdateWithoutAccountsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  sessions: SessionUpdateManyWithoutUserNestedInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithoutSessionsInput {
  accounts: AccountUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutAccountsInput {
  create: UserCreateWithoutAccountsInput!
  update: UserUpdateWithoutAccountsInput!
  where: UserWhereInput
}

input UserUpsertWithoutSessionsInput {
  create: UserCreateWithoutSessionsInput!
  update: UserUpdateWithoutSessionsInput!
  where: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  accounts: AccountListRelationFilter
  createdAt: DateTimeFilter
  email: StringNullableFilter
  emailVerified: DateTimeNullableFilter
  id: StringFilter
  image: StringNullableFilter
  name: StringNullableFilter
  sessions: SessionListRelationFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  accounts: AccountListRelationFilter
  createdAt: DateTimeFilter
  email: String
  emailVerified: DateTimeNullableFilter
  id: String
  image: StringNullableFilter
  name: StringNullableFilter
  sessions: SessionListRelationFilter
  updatedAt: DateTimeFilter
}

type VerificationRequest {
  createdAt: DateTimeISO!
  expires: DateTimeISO!
  id: String!
  identifier: String!
  token: String!
  updatedAt: DateTimeISO!
}

type VerificationRequestCountAggregate {
  _all: Int!
  createdAt: Int!
  expires: Int!
  id: Int!
  identifier: Int!
  token: Int!
  updatedAt: Int!
}

input VerificationRequestCountOrderByAggregateInput {
  createdAt: SortOrder
  expires: SortOrder
  id: SortOrder
  identifier: SortOrder
  token: SortOrder
  updatedAt: SortOrder
}

input VerificationRequestCreateInput {
  createdAt: DateTimeISO
  expires: DateTimeISO!
  id: String
  identifier: String!
  token: String!
  updatedAt: DateTimeISO
}

input VerificationRequestCreateManyInput {
  createdAt: DateTimeISO
  expires: DateTimeISO!
  id: String
  identifier: String!
  token: String!
  updatedAt: DateTimeISO
}

type VerificationRequestGroupBy {
  _count: VerificationRequestCountAggregate
  _max: VerificationRequestMaxAggregate
  _min: VerificationRequestMinAggregate
  createdAt: DateTimeISO!
  expires: DateTimeISO!
  id: String!
  identifier: String!
  token: String!
  updatedAt: DateTimeISO!
}

input VerificationRequestIdentifierTokenCompoundUniqueInput {
  identifier: String!
  token: String!
}

type VerificationRequestMaxAggregate {
  createdAt: DateTimeISO
  expires: DateTimeISO
  id: String
  identifier: String
  token: String
  updatedAt: DateTimeISO
}

input VerificationRequestMaxOrderByAggregateInput {
  createdAt: SortOrder
  expires: SortOrder
  id: SortOrder
  identifier: SortOrder
  token: SortOrder
  updatedAt: SortOrder
}

type VerificationRequestMinAggregate {
  createdAt: DateTimeISO
  expires: DateTimeISO
  id: String
  identifier: String
  token: String
  updatedAt: DateTimeISO
}

input VerificationRequestMinOrderByAggregateInput {
  createdAt: SortOrder
  expires: SortOrder
  id: SortOrder
  identifier: SortOrder
  token: SortOrder
  updatedAt: SortOrder
}

input VerificationRequestOrderByWithAggregationInput {
  _count: VerificationRequestCountOrderByAggregateInput
  _max: VerificationRequestMaxOrderByAggregateInput
  _min: VerificationRequestMinOrderByAggregateInput
  createdAt: SortOrder
  expires: SortOrder
  id: SortOrder
  identifier: SortOrder
  token: SortOrder
  updatedAt: SortOrder
}

input VerificationRequestOrderByWithRelationInput {
  createdAt: SortOrder
  expires: SortOrder
  id: SortOrder
  identifier: SortOrder
  token: SortOrder
  updatedAt: SortOrder
}

enum VerificationRequestScalarFieldEnum {
  createdAt
  expires
  id
  identifier
  token
  updatedAt
}

input VerificationRequestScalarWhereWithAggregatesInput {
  AND: [VerificationRequestScalarWhereWithAggregatesInput!]
  NOT: [VerificationRequestScalarWhereWithAggregatesInput!]
  OR: [VerificationRequestScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  expires: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  identifier: StringWithAggregatesFilter
  token: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input VerificationRequestUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  identifier: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VerificationRequestUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  identifier: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VerificationRequestWhereInput {
  AND: [VerificationRequestWhereInput!]
  NOT: [VerificationRequestWhereInput!]
  OR: [VerificationRequestWhereInput!]
  createdAt: DateTimeFilter
  expires: DateTimeFilter
  id: StringFilter
  identifier: StringFilter
  token: StringFilter
  updatedAt: DateTimeFilter
}

input VerificationRequestWhereUniqueInput {
  AND: [VerificationRequestWhereInput!]
  NOT: [VerificationRequestWhereInput!]
  OR: [VerificationRequestWhereInput!]
  createdAt: DateTimeFilter
  expires: DateTimeFilter
  id: String
  identifier: StringFilter
  identifier_token: VerificationRequestIdentifierTokenCompoundUniqueInput
  token: String
  updatedAt: DateTimeFilter
}